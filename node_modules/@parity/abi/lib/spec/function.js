'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}} // Copyright 2015-2017 Parity Technologies (UK) Ltd.
// This file is part of Parity.

// Parity is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity.  If not, see <http://www.gnu.org/licenses/>.

var Decoder = require('../decoder/decoder');
var Encoder = require('../encoder/encoder');
var Param = require('./param');var _require =
require('../util/signature'),methodSignature = _require.methodSignature;var

Func = function () {
  function Func(abi) {_classCallCheck(this, Func);
    this._abi = abi;
    this._constant = !!abi.constant;
    this._payable = abi.payable;
    this._inputs = Param.toParams(abi.inputs || []);
    this._outputs = Param.toParams(abi.outputs || []);var _methodSignature =

    methodSignature(abi.name, this.inputParamTypes()),id = _methodSignature.id,name = _methodSignature.name,signature = _methodSignature.signature;

    this._id = id;
    this._name = name;
    this._signature = signature;
  }_createClass(Func, [{ key: 'decodeInput', value: function decodeInput(

































    data) {
      return Decoder.decode(this.inputParamTypes(), data);
    } }, { key: 'decodeOutput', value: function decodeOutput(

    data) {
      return Decoder.decode(this.outputParamTypes(), data);
    } }, { key: 'encodeCall', value: function encodeCall(

    tokens) {
      return '' + this._signature + Encoder.encode(tokens);
    } }, { key: 'inputParamTypes', value: function inputParamTypes()

    {
      return this._inputs.map(function (input) {return input.kind;});
    } }, { key: 'outputParamTypes', value: function outputParamTypes()

    {
      return this._outputs.map(function (output) {return output.kind;});
    } }, { key: 'abi', get: function get() {return this._abi;} }, { key: 'constant', get: function get() {return this._constant;} }, { key: 'id', get: function get() {return this._id;} }, { key: 'inputs', get: function get() {return this._inputs;} }, { key: 'name', get: function get() {return this._name;} }, { key: 'outputs', get: function get() {return this._outputs;} }, { key: 'payable', get: function get() {return !!this._payable;} }, { key: 'signature', get: function get() {return this._signature;} }]);return Func;}();


module.exports = Func;