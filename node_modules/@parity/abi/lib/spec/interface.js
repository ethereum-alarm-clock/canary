'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}} // Copyright 2015-2017 Parity Technologies (UK) Ltd.
// This file is part of Parity.

// Parity is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity.  If not, see <http://www.gnu.org/licenses/>.

var Constructor = require('./constructor');
var Event = require('./event/event');
var Func = require('./function');
var Token = require('../token');var

Interface = function () {
  function Interface(abi) {_classCallCheck(this, Interface);
    this._interface = Interface.parseABI(abi);
  }_createClass(Interface, [{ key: 'encodeTokens', value: function encodeTokens(

















    paramTypes, values) {
      return Interface.encodeTokens(paramTypes, values);
    } }, { key: 'interface', get: function get() {return this._interface;} }, { key: 'constructors', get: function get() {return this._interface.filter(function (item) {return item instanceof Constructor;});} }, { key: 'events', get: function get() {return this._interface.filter(function (item) {return item instanceof Event;});} }, { key: 'functions', get: function get() {return this._interface.filter(function (item) {return item instanceof Func;});} }]);return Interface;}();


Interface.encodeTokens = function (paramTypes, values) {
  var createToken = function createToken(paramType, value) {
    if (paramType.subtype) {
      return new Token(paramType.type, value.map(function (entry) {return createToken(paramType.subtype, entry);}));
    }

    return new Token(paramType.type, value);
  };

  return paramTypes.map(function (paramType, index) {return createToken(paramType, values[index]);});
};

Interface.parseABI = function (abi) {
  return abi.map(function (item) {
    switch (item.type) {
      case 'constructor':
        return new Constructor(item);

      case 'event':
        return new Event(item);

      case 'function':
      case 'fallback':
        return new Func(item);

      default:
        throw new Error('Unknown ABI type ' + item.type);}

  });
};

module.exports = Interface;