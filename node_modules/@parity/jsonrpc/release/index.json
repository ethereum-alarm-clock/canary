{
  "methods": [
    {
      "name": "db_getHex",
      "desc": "Returns binary data from the local database. (Deprecated and not supported, to be removed in a future version)",
      "params": [
        "String - Database name",
        "String - Key name"
      ],
      "returns": "Data - The previously stored data",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "db_getString",
      "desc": "Returns string from the local database. (Deprecated and not supported, to be removed in a future version)",
      "params": [
        "String - Database name",
        "String - Key name"
      ],
      "returns": "String - The previously stored string",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "db_putHex",
      "desc": "Stores binary data in the local database. (Deprecated and not supported, to be removed in a future version)",
      "params": [
        "String - Database name",
        "String - Key name",
        "Data - The data to store"
      ],
      "returns": "Boolean - `true` if the value was stored, otherwise `false`",
      "inputFormatters": [
        null,
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "db_putString",
      "desc": "Stores a string in the local database. (Deprecated and not supported, to be removed in a future version)",
      "params": [
        "String - Database name",
        "String - Key name",
        "String - The string to store"
      ],
      "returns": "Boolean - `true` if the value was stored, otherwise `false`",
      "inputFormatters": [
        null,
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_accounts",
      "desc": "Returns a list of addresses owned by client.",
      "params": [],
      "returns": "Array - 20 Bytes - addresses owned by the client.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "eth_blockNumber",
      "desc": "Returns the number of most recent block.",
      "params": [],
      "returns": "Quantity - integer of the current block number the client is on.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "eth_call",
      "desc": "Executes a new message call immediately without creating a transaction on the block chain.",
      "params": [
        "CallRequest - The transaction call object.",
        "BlockNumber - (optional) Integer block number, or the string `'latest'`, `'earliest'` or `'pending'`, see the [default block parameter](#the-default-block-parameter)."
      ],
      "returns": "Data - the return value of executed contract.",
      "inputFormatters": [
        "inputCallFormatter",
        "inputDefaultBlockNumberFormatter"
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_coinbase",
      "desc": "Returns the client coinbase address.",
      "params": [],
      "returns": "Address - The current coinbase address.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "eth_estimateGas",
      "desc": "Makes a call or transaction, which won't be added to the blockchain and returns the used gas, which can be used for estimating the used gas.",
      "params": [
        "CallRequest - Same as [eth_call](#eth_call) parameters, except that all properties are optional.",
        "BlockNumber - (optional) Integer block number, or the string `'latest'`, `'earliest'` or `'pending'`, see the [default block parameter](#the-default-block-parameter)."
      ],
      "returns": "Quantity - The amount of gas used.",
      "inputFormatters": [
        "inputCallFormatter",
        "inputDefaultBlockNumberFormatter"
      ],
      "outputFormatter": "utils.toDecimal"
    },
    {
      "name": "eth_fetchQueuedTransactions",
      "desc": "?",
      "params": [
        "?"
      ],
      "returns": "Boolean - whether the call was successful",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_flush",
      "desc": "?",
      "params": [],
      "returns": "Boolean - whether the call was successful",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "eth_gasPrice",
      "desc": "Returns the current price per gas in wei.",
      "params": [],
      "returns": "Quantity - integer of the current gas price in wei.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "eth_getBalance",
      "desc": "Returns the balance of the account of given address.",
      "params": [
        "Address - 20 Bytes - address to check for balance.",
        "BlockNumber - (optional) integer block number, or the string `'latest'`, `'earliest'` or `'pending'`, see the [default block parameter](#the-default-block-parameter)."
      ],
      "returns": "Quantity - integer of the current balance in wei.",
      "inputFormatters": [
        "inputAddressFormatter",
        "inputDefaultBlockNumberFormatter"
      ],
      "outputFormatter": "outputBigNumberFormatter"
    },
    {
      "name": "eth_getBlockByHash",
      "desc": "Returns information about a block by hash.",
      "params": [
        "Hash - Hash of a block.",
        "Boolean - If `true` it returns the full transaction objects, if `false` only the hashes of the transactions."
      ],
      "returns": {
        "desc": "Object - A block object, or `null` when no block was found.",
        "details": {
          "difficulty": "Quantity - integer of the difficulty for this block",
          "extraData": "Data - the 'extra data' field of this block",
          "gasLimit": "Quantity - the maximum gas allowed in this block",
          "gasUsed": "Quantity - the total used gas by all transactions in this block",
          "hash": "Hash - 32 Bytes - hash of the block. `null` when its pending block",
          "logsBloom": "Data - 256 Bytes - the bloom filter for the logs of the block. `null` when its pending block",
          "miner": "Address - 20 Bytes - the address of the beneficiary to whom the mining rewards were given",
          "nonce": "Data - 8 Bytes - hash of the generated proof-of-work. `null` when its pending block",
          "number": "Quantity - The block number. `null` when its pending block",
          "parentHash": "Hash - 32 Bytes - hash of the parent block",
          "receiptsRoot": "Data - 32 Bytes - the root of the receipts trie of the block",
          "sha3Uncles": "Data - 32 Bytes - SHA3 of the uncles data in the block",
          "size": "Quantity - integer the size of this block in bytes",
          "stateRoot": "Data - 32 Bytes - the root of the final state trie of the block",
          "timestamp": "Quantity - the unix timestamp for when the block was collated",
          "totalDifficulty": "Quantity - integer of the total difficulty of the chain until this block",
          "transactions": "Array - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter",
          "transactionsRoot": "Data - 32 Bytes - the root of the transaction trie of the block",
          "uncles": "Array - Array of uncle hashes"
        }
      },
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_getBlockByNumber",
      "desc": "Returns information about a block by block number.",
      "params": [
        "BlockNumber - integer of a block number, or the string `'earliest'`, `'latest'` or `'pending'`, as in the [default block parameter](#the-default-block-parameter).",
        "Boolean - If `true` it returns the full transaction objects, if `false` only the hashes of the transactions."
      ],
      "returns": "See [eth_getBlockByHash](#eth_getblockbyhash)",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_getBlockTransactionCountByHash",
      "desc": "Returns the number of transactions in a block from a block matching the given block hash.",
      "params": [
        "Hash - 32 Bytes - hash of a block."
      ],
      "returns": "Quantity - integer of the number of transactions in this block.",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_getBlockTransactionCountByNumber",
      "desc": "Returns the number of transactions in a block from a block matching the given block number.",
      "params": [
        "BlockNumber - integer of a block number, or the string `'earliest'`, `'latest'` or `'pending'`, as in the [default block parameter](#the-default-block-parameter)."
      ],
      "returns": "Quantity - integer of the number of transactions in this block.",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_getCode",
      "desc": "Returns code at a given address.",
      "params": [
        "Address - 20 Bytes - address.",
        "BlockNumber - integer block number, or the string `'latest'`, `'earliest'` or `'pending'`, see the [default block parameter](#the-default-block-parameter)."
      ],
      "returns": "Data - the code from the given address.",
      "inputFormatters": [
        "inputAddressFormatter",
        "inputDefaultBlockNumberFormatter"
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_getFilterChanges",
      "desc": "Polling method for a filter, which returns an array of logs which occurred since last poll.",
      "params": [
        "Quantity - The filter id."
      ],
      "returns": "Array - Array of log objects, or an empty array if nothing has changed since last poll.",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_getFilterChangesEx",
      "desc": "?",
      "params": [
        "?"
      ],
      "returns": "Boolean - whether the call was successful",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_getFilterLogs",
      "desc": "Returns an array of all logs matching filter with given id.",
      "params": [
        "Quantity - The filter id."
      ],
      "returns": "See [eth_getFilterChanges](#eth_getfilterchanges)",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_getFilterLogsEx",
      "desc": "?",
      "params": [
        "?"
      ],
      "returns": "Boolean - whether the call was successful",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_getLogs",
      "desc": "Returns an array of all logs matching a given filter object.",
      "params": [
        "Object - The filter object, see [eth_newFilter parameters](#eth_newfilter)."
      ],
      "returns": "See [eth_getFilterChanges](#eth_getfilterchanges)",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_getLogsEx",
      "desc": "?",
      "params": [
        "?"
      ],
      "returns": "Boolean - whether the call was successful",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_getStorageAt",
      "desc": "Returns the value from a storage position at a given address.",
      "params": [
        "Address - 20 Bytes - address of the storage.",
        "Quantity - integer of the position in the storage.",
        "BlockNumber - (optional) integer block number, or the string `'latest'`, `'earliest'` or `'pending'`, see the [default block parameter](#the-default-block-parameter)."
      ],
      "returns": "Data - the value at this storage position.",
      "inputFormatters": [
        null,
        "utils.toHex",
        "inputDefaultBlockNumberFormatter"
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_getTransactionByBlockHashAndIndex",
      "desc": "Returns information about a transaction by block hash and transaction index position.",
      "params": [
        "Hash - hash of a block.",
        "Quantity - integer of the transaction index position."
      ],
      "returns": "See [eth_getBlockByHash](#eth_gettransactionbyhash)",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_getTransactionByBlockNumberAndIndex",
      "desc": "Returns information about a transaction by block number and transaction index position.",
      "params": [
        "BlockNumber - a block number, or the string `'earliest'`, `'latest'` or `'pending'`, as in the [default block parameter](#the-default-block-parameter).",
        "Quantity - The transaction index position."
      ],
      "returns": "See [eth_getBlockByHash](#eth_gettransactionbyhash)",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_getTransactionByHash",
      "desc": "Returns the information about a transaction requested by transaction hash.",
      "params": [
        "Hash - 32 Bytes - hash of a transaction."
      ],
      "returns": {
        "desc": "Object - A transaction object, or `null` when no transaction was found:",
        "details": {
          "blockHash": "Hash - 32 Bytes - hash of the block where this transaction was in. `null` when its pending.",
          "blockNumber": "BlockNumber - block number where this transaction was in. `null` when its pending.",
          "chainId": "Quantity - the chain id of the transaction, if any.",
          "condition": "Object - (optional) conditional submission, Block number in `block` or timestamp in `time` or `null`. (parity-feature)",
          "creates": "Hash - creates contract hash",
          "from": "Address - 20 Bytes - address of the sender.",
          "gas": "Quantity - gas provided by the sender.",
          "gasPrice": "Quantity - gas price provided by the sender in Wei.",
          "hash": "Hash - 32 Bytes - hash of the transaction.",
          "input": "Data - the data send along with the transaction.",
          "nonce": "Quantity - the number of transactions made by the sender prior to this one.",
          "publicKey": "Hash - public key of the signer.",
          "r": "Quantity - the R field of the signature.",
          "raw": "Data - raw transaction data",
          "standard_v": "Quantity - the standardised V field of the signature (0 or 1).",
          "to": "Address - 20 Bytes - address of the receiver. `null` when its a contract creation transaction.",
          "transactionIndex": "Quantity - integer of the transactions index position in the block. `null` when its pending.",
          "v": "Quantity - the standardised V field of the signature.",
          "value": "Quantity - value transferred in Wei."
        }
      },
      "inputFormatters": [
        null
      ],
      "outputFormatter": "outputTransactionFormatter"
    },
    {
      "name": "eth_getTransactionCount",
      "desc": "Returns the number of transactions *sent* from an address.",
      "params": [
        "Address - 20 Bytes - address.",
        "BlockNumber - (optional) integer block number, or the string `'latest'`, `'earliest'` or `'pending'`, see the [default block parameter](#the-default-block-parameter)."
      ],
      "returns": "Quantity - integer of the number of transactions send from this address.",
      "inputFormatters": [
        null,
        "inputDefaultBlockNumberFormatter"
      ],
      "outputFormatter": "utils.toDecimal"
    },
    {
      "name": "eth_getTransactionReceipt",
      "desc": "Returns the receipt of a transaction by transaction hash.\n\n**Note** That the receipt is available even for pending transactions.",
      "params": [
        "Hash - hash of a transaction."
      ],
      "returns": {
        "desc": "Object - A transaction receipt object, or `null` when no receipt was found:",
        "details": {
          "blockHash": "Hash - 32 Bytes - hash of the block where this transaction was in.",
          "blockNumber": "BlockNumber - block number where this transaction was in.",
          "contractAddress": "Address - 20 Bytes - The contract address created, if the transaction was a contract creation, otherwise `null`.",
          "cumulativeGasUsed": "Quantity - The total amount of gas used when this transaction was executed in the block.",
          "gasUsed": "Quantity - The amount of gas used by this specific transaction alone.",
          "logs": "Array - Array of log objects, which this transaction generated.",
          "transactionHash": "Hash - 32 Bytes - hash of the transaction.",
          "transactionIndex": "Quantity - integer of the transactions index position in the block."
        }
      },
      "inputFormatters": [
        null
      ],
      "outputFormatter": "outputTransactionReceiptFormatter"
    },
    {
      "name": "eth_getUncleByBlockHashAndIndex",
      "desc": "Returns information about a uncle of a block by hash and uncle index position.\n\n**Note:** An uncle doesn't contain individual transactions.",
      "params": [
        "Hash - Hash of a block.",
        "Quantity - The uncle's index position."
      ],
      "returns": "See [eth_getBlockByHash](#eth_getblockbyhash)",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_getUncleByBlockNumberAndIndex",
      "desc": "Returns information about a uncle of a block by number and uncle index position.\n\n**Note:** An uncle doesn't contain individual transactions.",
      "params": [
        "BlockNumber - a block number, or the string `'earliest'`, `'latest'` or `'pending'`, as in the [default block parameter](#the-default-block-parameter).",
        "Quantity - The uncle's index position."
      ],
      "returns": "See [eth_getBlockByHash](#eth_getblockbyhash)",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_getUncleCountByBlockHash",
      "desc": "Returns the number of uncles in a block from a block matching the given block hash.",
      "params": [
        "Hash - 32 Bytes - hash of a block."
      ],
      "returns": "Quantity - integer of the number of uncles in this block.",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_getUncleCountByBlockNumber",
      "desc": "Returns the number of uncles in a block from a block matching the given block number.",
      "params": [
        "BlockNumber - integer of a block number, or the string 'latest', 'earliest' or 'pending', see the [default block parameter](#the-default-block-parameter)."
      ],
      "returns": "Quantity - integer of the number of uncles in this block.",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_getWork",
      "desc": "Returns the hash of the current block, the seedHash, and the boundary condition to be met (\"target\").",
      "params": [],
      "returns": "Array - Array with the following properties:\n  - `Data`, 32 Bytes - current block header pow-hash.\n  - `Data`, 32 Bytes - the seed hash used for the DAG.\n  - `Data`, 32 Bytes - the boundary condition (\"target\"), 2^256 / difficulty.\n  - `Quantity`, the current block number.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "eth_hashrate",
      "desc": "Returns the number of hashes per second that the node is mining with.",
      "params": [],
      "returns": "Quantity - number of hashes per second.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "eth_inspectTransaction",
      "desc": "?",
      "params": [
        "?"
      ],
      "returns": "Boolean - whether the call was successful",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_mining",
      "desc": "Returns `true` if client is actively mining new blocks.",
      "params": [],
      "returns": "Boolean - `true` of the client is mining, otherwise `false`.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "eth_newBlockFilter",
      "desc": "Creates a filter in the node, to notify when a new block arrives.\nTo check if the state has changed, call [eth_getFilterChanges](#eth_getfilterchanges).",
      "params": [],
      "returns": "Quantity - A filter id.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "eth_newFilter",
      "desc": "Creates a filter object, based on filter options, to notify when the state changes (logs).\nTo check if the state has changed, call [eth_getFilterChanges](#eth_getfilterchanges).\n\n##### A note on specifying topic filters:\nTopics are order-dependent. A transaction with a log with topics [A, B] will be matched by the following topic filters:\n* `[]` \"anything\"\n* `[A]` \"A in first position (and anything after)\"\n* `[null, B]` \"anything in first position AND B in second position (and anything after)\"\n* `[A, B]` \"A in first position AND B in second position (and anything after)\"\n* `[[A, B], [A, B]]` \"(A OR B) in first position AND (A OR B) in second position (and anything after)\"",
      "params": [
        {
          "desc": "Object - The filter options:",
          "details": {
            "address": "Address - (optional) 20 Bytes - Contract address or a list of addresses from which logs should originate.",
            "fromBlock": "BlockNumber - (optional) (default: latest) Integer block number, or `'latest'` for the last mined block or `'pending'`, `'earliest'` for not yet mined transactions.",
            "limit": "Quantity - (optional) The maximum number of entries to retrieve (latest first).",
            "toBlock": "BlockNumber - (optional) (default: latest) Integer block number, or `'latest'` for the last mined block or `'pending'`, `'earliest'` for not yet mined transactions.",
            "topics": "Array - (optional) Array of 32 Bytes `Data` topics. Topics are order-dependent. It's possible to pass in `null` to match any topic, or a subarray of multiple topics of which one should be matching."
          }
        }
      ],
      "returns": "Quantity - The filter id.",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_newFilterEx",
      "desc": "?",
      "params": [
        "?"
      ],
      "returns": "Boolean - whether the call was successful",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_newPendingTransactionFilter",
      "desc": "Creates a filter in the node, to notify when new pending transactions arrive.\n\nTo check if the state has changed, call [eth_getFilterChanges](#eth_getfilterchanges).",
      "params": [],
      "returns": "Quantity - A filter id.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "eth_notePassword",
      "desc": "?",
      "params": [
        "?"
      ],
      "returns": "Boolean - whether the call was successful",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_pendingTransactions",
      "desc": "?",
      "params": [],
      "returns": "Boolean - whether the call was successful",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "eth_protocolVersion",
      "desc": "Returns the current ethereum protocol version.",
      "params": [],
      "returns": "String - The current ethereum protocol version.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "eth_register",
      "desc": "?",
      "params": [
        "?"
      ],
      "returns": "Boolean - whether the call was successful",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_sendRawTransaction",
      "desc": "Creates new message call transaction or a contract creation for signed transactions.\n\n**Note:** `eth_submitTransaction` is an alias of this method.",
      "params": [
        "Data - The signed transaction data."
      ],
      "returns": "Hash - 32 Bytes - the transaction hash, or the zero hash if the transaction is not yet available\n\nUse [eth_getTransactionReceipt](#eth_gettransactionreceipt) to get the contract address, after the transaction was mined, when you created a contract.",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_sendTransaction",
      "desc": "Creates new message call transaction or a contract creation, if the data field contains code.",
      "params": [
        "TransactionRequest - The transaction object."
      ],
      "returns": "Hash - 32 Bytes - the transaction hash, or the zero hash if the transaction is not yet available.\n\nUse [eth_getTransactionReceipt](#eth_gettransactionreceipt) to get the contract address, after the transaction was mined, when you created a contract.",
      "inputFormatters": [
        "inputTransactionFormatter"
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_sign",
      "desc": "The sign method calculates an Ethereum specific signature with: `sign(keccak256(\"\u0019Ethereum Signed Message:\n\" + len(message) + message)))`.",
      "params": [
        "Address - 20 Bytes - address.",
        "Data - Data which hash to sign."
      ],
      "returns": "Data - Signed data.",
      "inputFormatters": [
        "inputAddressFormatter",
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_signTransaction",
      "desc": "Signs transactions without dispatching it to the network. It can be later submitted using [eth_sendRawTransaction](#eth_sendrawtransaction).",
      "params": [
        "TransactionRequest - Transaction object, see [eth_sendTransaction](#eth_sendTransaction)."
      ],
      "returns": {
        "desc": "Object - Signed transaction and it's details:",
        "details": {
          "raw": "Data - The signed, RLP encoded transaction.",
          "tx": {
            "desc": "Object - Transaction object:",
            "details": {
              "blockHash": "Hash - 32 Bytes - hash of the block where this transaction was in. `null` when its pending.",
              "blockNumber": "BlockNumber - block number where this transaction was in. `null` when its pending.",
              "chainId": "Quantity - the chain id of the transaction, if any.",
              "condition": "Object - (optional) conditional submission, Block number in `block` or timestamp in `time` or `null`. (parity-feature)",
              "creates": "Hash - creates contract hash",
              "from": "Address - 20 Bytes - address of the sender.",
              "gas": "Quantity - gas provided by the sender.",
              "gasPrice": "Quantity - gas price provided by the sender in Wei.",
              "hash": "Hash - 32 Bytes - hash of the transaction.",
              "input": "Data - the data send along with the transaction.",
              "nonce": "Quantity - the number of transactions made by the sender prior to this one.",
              "publicKey": "Hash - public key of the signer.",
              "r": "Quantity - the R field of the signature.",
              "raw": "Data - raw transaction data",
              "standard_v": "Quantity - the standardised V field of the signature (0 or 1).",
              "to": "Address - 20 Bytes - address of the receiver. `null` when its a contract creation transaction.",
              "transactionIndex": "Quantity - integer of the transactions index position in the block. `null` when its pending.",
              "v": "Quantity - the standardised V field of the signature.",
              "value": "Quantity - value transferred in Wei."
            }
          }
        }
      },
      "inputFormatters": [
        "inputCallFormatter"
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_submitHashrate",
      "desc": "Used for submitting mining hashrate.",
      "params": [
        "Data - a hexadecimal string representation (32 bytes) of the hash rate.",
        "Data - A random hexadecimal(32 bytes) ID identifying the client."
      ],
      "returns": "Boolean - `true` if submitting went through succesfully and `false` otherwise.",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_submitWork",
      "desc": "Used for submitting a proof-of-work solution.",
      "params": [
        "Data - 8 Bytes - The nonce found (64 bits).",
        "Data - 32 Bytes - The header's pow-hash (256 bits)",
        "Data - 32 Bytes - The mix digest (256 bits)."
      ],
      "returns": "Boolean - `true` if the provided solution is valid, otherwise `false`.",
      "inputFormatters": [
        null,
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_subscribe",
      "desc": "\n  Starts a subscription (on WebSockets / IPC / TCP transports) to a particular event. For every event that\n  matches the subscription a JSON-RPC notification with event details and subscription ID will be sent to a client.\n\n  An example notification received by subscribing to `newHeads` event:\n  ```\n  {\"jsonrpc\":\"2.0\",\"method\":\"eth_subscription\",\"params\":{\"subscription\":\"0x416d77337e24399d\",\"result\":{\"difficulty\":\"0xd9263f42a87\",<...>,\n  \"uncles\":[]}}}\n  ```\n\n  You can unsubscribe using `eth_unsubscribe` RPC method. Subscriptions are also tied to a transport\n  connection, disconnecting causes all subscriptions to be canceled.\n      ",
      "params": [
        "String - Subscription type: one of `newHeads`, `logs`",
        "Object - \n  Subscription type-specific parameters. It must be left empty for\n  `newHeads` and must contain filter object for `logs`.\n          "
      ],
      "returns": "String - Assigned subscription ID",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_syncing",
      "desc": "Returns an object with data about the sync status or `false`.",
      "params": [],
      "returns": {
        "desc": "Object - An object with sync status data or `FALSE`, when not syncing.",
        "details": {
          "blockGap": "Array - Array of \"first\", \"last\", such that [first, last) are all missing from the chain",
          "currentBlock": "Quantity - The current block, same as eth_blockNumber",
          "highestBlock": "Quantity - The estimated highest block",
          "startingBlock": "Quantity - The block at which the import started (will only be reset, after the sync reached this head)",
          "warpChunksAmount": "Quantity - Total amount of snapshot chunks",
          "warpChunksProcessed": "Quantity - Total amount of snapshot chunks processed"
        }
      },
      "inputFormatters": [],
      "outputFormatter": "outputSyncingFormatter"
    },
    {
      "name": "eth_uninstallFilter",
      "desc": "Uninstalls a filter with given id. Should always be called when watch is no longer needed.\nAdditonally Filters timeout when they aren't requested with [eth_getFilterChanges](#eth_getfilterchanges) for a period of time.",
      "params": [
        "Quantity - The filter id."
      ],
      "returns": "Boolean - `true` if the filter was successfully uninstalled, otherwise `false`.",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_unregister",
      "desc": "?",
      "params": [
        "?"
      ],
      "returns": "Boolean - whether the call was successful",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "eth_unsubscribe",
      "desc": "Unsubscribes from a subscription.",
      "params": [
        "String - Subscription ID"
      ],
      "returns": "Boolean - whether the call was successful",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "net_listening",
      "desc": "Returns `true` if client is actively listening for network connections.",
      "params": [],
      "returns": "Boolean - `true` when listening, otherwise `false`.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "net_peerCount",
      "desc": "Returns number of peers currenly connected to the client.",
      "params": [],
      "returns": "Quantity - Integer of the number of connected peers",
      "inputFormatters": [],
      "outputFormatter": "utils.toDecimal"
    },
    {
      "name": "net_version",
      "desc": "Returns the current network protocol version.",
      "params": [],
      "returns": "String - The current network protocol version",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_acceptNonReservedPeers",
      "desc": "Set Parity to accept non-reserved peers (default behavior).",
      "params": [],
      "returns": "Boolean - `true` if successful.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_accountsInfo",
      "desc": "Provides metadata for accounts.",
      "params": [],
      "returns": {
        "desc": "Object - Maps account address to metadata.",
        "details": {
          "name": "String - Account name"
        }
      },
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_addReservedPeer",
      "desc": "Add a reserved peer.",
      "params": [
        "String - Enode address"
      ],
      "returns": "Boolean - `true` if successful.",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_allAccountsInfo",
      "desc": "returns a map of accounts as an object.",
      "params": [],
      "returns": "Array - Account metadata.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_chain",
      "desc": "Returns the name of the connected chain. ",
      "params": [],
      "returns": "String - chain name, one of: \"foundation\", \"kovan\", &c. of a filename.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_chainId",
      "desc": "Returns the current chain ID used for tranaction signing.",
      "params": [],
      "returns": "Quantity - The current blockchain chain ID",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_chainStatus",
      "desc": "Returns the information on warp sync blocks",
      "params": [],
      "returns": {
        "desc": "Object - The status object",
        "details": {
          "blockGap": "Array - (optional) Describes the gap in the blockchain, if there is one: (first, last)"
        }
      },
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_changePassword",
      "desc": "Change the password for a given account.",
      "params": [
        "Address - Address of the account.",
        "String - Old password.",
        "String - New password."
      ],
      "returns": "Boolean - `true` if the call was successful.",
      "inputFormatters": [
        null,
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_changeVault",
      "desc": "Changes the current valut for the account",
      "params": [
        "Address - Account address",
        "String - Vault name"
      ],
      "returns": "Boolean - True on success",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_changeVaultPassword",
      "desc": "Changes the password for any given vault",
      "params": [
        "String - Vault name",
        "String - New Password"
      ],
      "returns": "Boolean - True on success",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_checkRequest",
      "desc": "Get the the transaction hash of the request previously posted to [`parity_postTransaction`](#parity_posttransaction) or [`parity_postSign`](#parity_postsign). Will return a JSON-RPC error if the request was rejected.",
      "params": [
        "Quantity - The id of the request sent to the signer."
      ],
      "returns": "Hash - 32 Bytes - the transaction hash or `null` if the request hasn't been signed yet.",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_cidV0",
      "desc": "Compute a v0 IPFS Content ID from protobuf encoded bytes.",
      "params": [
        "Data - to encode."
      ],
      "returns": "String - Base58 encoded CID",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_closeVault",
      "desc": "Closes a vault with the given name",
      "params": [
        "String - Vault name"
      ],
      "returns": "Boolean - True on success",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_composeTransaction",
      "desc": "Given partial transaction request produces transaction with all fields filled in. Such transaction can be then signed externally.",
      "params": [
        "TransactionRequest - see [`eth_sendTransaction`](JSONRPC-eth-module#eth_sendtransaction)."
      ],
      "returns": "Object - Transaction object (same as the parameter) with missing optional fields filled in by defaults.",
      "inputFormatters": [
        "inputCallFormatter"
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_consensusCapability",
      "desc": "Returns information on current consensus capability.",
      "params": [],
      "returns": "Object - or `String` - Either `\"capable\"`, `{\"capableUntil\":N}`, `{\"incapableSince\":N}` or `\"unknown\"` (`N` is a block number).",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_dappsList",
      "desc": "Returns a list of available local dapps.",
      "params": [],
      "returns": "Array - The list of dapps",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_dappsRefresh",
      "desc": "Returns a boolean value upon success and error upon failure",
      "params": [],
      "returns": "Boolean - True for success. error details for failure",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_dappsUrl",
      "desc": "Returns the hostname and the port of dapps/rpc server, error if not enabled.",
      "params": [],
      "returns": "String - The hostname and port number",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_decryptMessage",
      "desc": "Decrypt a message encrypted with a ECIES public key.",
      "params": [
        "Address - Account which can decrypt the message.",
        "Data - Encrypted message."
      ],
      "returns": "Data - Decrypted message.",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_defaultAccount",
      "desc": "Returns the defaultAccount that is to be used with transactions",
      "params": [],
      "returns": "Address - The account address",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_defaultExtraData",
      "desc": "Returns the default extra data",
      "params": [],
      "returns": "Data - Extra data",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_deriveAddressHash",
      "desc": "Derive new address from given account address using specific hash.",
      "params": [
        "Address - Account address to derive from.",
        "String - Password to the account.",
        "Object - Derivation hash and type (`soft` or `hard`). E.g. `{ hash: \"0x123..123\", type: \"hard\" }`.",
        "Boolean - Flag indicating if the account should be saved."
      ],
      "returns": "Address - 20 Bytes new derived address.",
      "inputFormatters": [
        null,
        null,
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_deriveAddressIndex",
      "desc": "Derive new address from given account address using hierarchical derivation (sequence of 32-bit integer indices).",
      "params": [
        "Address - Account address to export.",
        "String - Password to the account.",
        "Array - Hierarchical derivation sequence of index and type (`soft` or `hard`). E.g. `[{index:1,type:\"hard\"},{index:2,type:\"soft\"}]`.",
        "Boolean - Flag indicating if the account should be saved."
      ],
      "returns": "Address - 20 Bytes new derived address.",
      "inputFormatters": [
        null,
        null,
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_devLogs",
      "desc": "Returns latest stdout logs of your node.",
      "params": [],
      "returns": "Array - Development logs",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_devLogsLevels",
      "desc": "Returns current logging level settings. Logging level can be set with `--logging` and be one of: `\"\"` (default), `\"info\"`, `\"debug\"`, `\"warn\"`, `\"error\"`, `\"trace\"`.",
      "params": [],
      "returns": "String - undefined",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_dropNonReservedPeers",
      "desc": "Set Parity to drop all non-reserved peers. To restore default behavior call [parity_acceptNonReservedPeers](#parity_acceptnonreservedpeers).",
      "params": [],
      "returns": "Boolean - `true` if successful.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_encryptMessage",
      "desc": "Encrypt some data with a public key under ECIES.",
      "params": [
        "Hash - Public EC key generated with `secp256k1` curve, truncated to the last 64 bytes.",
        "Data - The message to encrypt."
      ],
      "returns": "Data - Encrypted message.",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_enode",
      "desc": "Returns the node enode URI.",
      "params": [],
      "returns": "String - Enode URI",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_executeUpgrade",
      "desc": "Attempts to upgrade Parity to the version specified in [parity_upgradeReady](#parity_upgradeready).",
      "params": [],
      "returns": "Boolean - returns `true` if the upgrade to the new release was successfully executed, `false` if not.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_exportAccount",
      "desc": "Returns a standard wallet file for given account if password matches.",
      "params": [
        "Address - Account address to export.",
        "String - Password to the account."
      ],
      "returns": "Object - Standard wallet JSON.",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_extraData",
      "desc": "Returns currently set extra data.",
      "params": [],
      "returns": "Data - Extra data.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_futureTransactions",
      "desc": "Returns all future transactions from transaction queue.",
      "params": [],
      "returns": "Array - Transaction list.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_gasCeilTarget",
      "desc": "Returns current target for gas ceiling.",
      "params": [],
      "returns": "Quantity - Gas ceiling target.",
      "inputFormatters": [],
      "outputFormatter": "outputBigNumberFormatter"
    },
    {
      "name": "parity_gasFloorTarget",
      "desc": "Returns current target for gas floor.",
      "params": [],
      "returns": "Quantity - Gas floor target.",
      "inputFormatters": [],
      "outputFormatter": "outputBigNumberFormatter"
    },
    {
      "name": "parity_gasPriceHistogram",
      "desc": "Returns a snapshot of the historic gas prices.",
      "params": [],
      "returns": {
        "desc": "Object - Historic values",
        "details": {
          "bucketBounds": "Array - Array of bound values.",
          "count": "Array - Array of counts."
        }
      },
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_generateSecretPhrase",
      "desc": "Creates a secret phrase that can be associated with an account.",
      "params": [],
      "returns": "String - The secret phrase.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_getBlockHeaderByNumber",
      "desc": "Get block header. Same as [`eth_getBlockByNumber`](JSONRPC-eth-module#eth_getblockbynumber) but without uncles and transactions.",
      "params": [
        "BlockNumber - integer of a block number, or the string `'earliest'`, `'latest'` or `'pending'`, as in the [default block parameter](#the-default-block-parameter)."
      ],
      "returns": "Object - Block header",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_getDappAddresses",
      "desc": "Returns the list of accounts available to a specific dapp.",
      "params": [
        "String - Dapp Id."
      ],
      "returns": "Array - The list of available accounts.",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_getDappDefaultAddress",
      "desc": "Returns a default account available to a specific dapp.",
      "params": [
        "String - Dapp Id."
      ],
      "returns": "Address - Default Address",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_getNewDappsAddresses",
      "desc": "Returns the list of accounts available to a new dapps.",
      "params": [],
      "returns": "Array - The list of available accounts, can be `null`.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_getNewDappsDefaultAddress",
      "desc": "Returns a default account available to dapps.",
      "params": [],
      "returns": "Address - Default Address",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_getVaultMeta",
      "desc": "Returns the metadata for a specific vault",
      "params": [
        "String - Vault name"
      ],
      "returns": "String - The associated JSON metadata for this vault",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_hardwareAccountsInfo",
      "desc": "Provides metadata for attached hardware wallets",
      "params": [],
      "returns": {
        "desc": "Object - Maps account address to metadata.",
        "details": {
          "manufacturer": "String - Manufacturer",
          "name": "String - Account name"
        }
      },
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_hardwarePinMatrixAck",
      "desc": "Send a pin to a hardware wallet at a specific path to unlock it",
      "params": [
        "String - path to the device",
        "String - the pin as recieved from the pin matrix"
      ],
      "returns": "Boolean - Whether or not the pin entry successfully unlocked the device",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_hashContent",
      "desc": "Creates a hash of a file at a given URL.",
      "params": [
        "String - The url of the content."
      ],
      "returns": "Hash - The SHA-3 hash of the content.",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_importGethAccounts",
      "desc": "Imports a list of accounts from Geth.",
      "params": [
        "Array - List of the Geth addresses to import."
      ],
      "returns": "Array - Array of the imported addresses.",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_killAccount",
      "desc": "Deletes an account.",
      "params": [
        "Address - The account to remove.",
        "String - Account password."
      ],
      "returns": "Boolean - `true` if the call was successful.",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_listAccounts",
      "desc": "Returns all addresses if Fat DB is enabled (`--fat-db`), `null` otherwise.",
      "params": [
        "Quantity - Integer number of addresses to display in a batch.",
        "Address - 20 Bytes - Offset address from which the batch should start in order, or `null`.",
        "BlockNumber - (optional) integer block number, or the string `'latest'`, `'earliest'` or `'pending'`."
      ],
      "returns": "Array - Requested number of `Address`es or `null` if Fat DB is not enabled.",
      "inputFormatters": [
        null,
        null,
        "inputDefaultBlockNumberFormatter"
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_listGethAccounts",
      "desc": "Returns a list of the accounts available from Geth.",
      "params": [],
      "returns": "Array - 20 Bytes addresses owned by the client.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_listOpenedVaults",
      "desc": "Returns a list of all opened vaults",
      "params": [],
      "returns": "Array - Names of all opened vaults",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_listRecentDapps",
      "desc": "Returns a list of the most recent active dapps.",
      "params": [],
      "returns": "Array - Array of Dapp Ids.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_listStorageKeys",
      "desc": "Returns all storage keys of the given address (first parameter) if Fat DB is enabled (`--fat-db`), `null` otherwise.",
      "params": [
        "Address - 20 Bytes - Account for which to retrieve the storage keys.",
        "Quantity - Integer number of addresses to display in a batch.",
        "Hash - 32 Bytes - Offset storage key from which the batch should start in order, or `null`.",
        "BlockNumber - (optional) integer block number, or the string `'latest'`, `'earliest'` or `'pending'`."
      ],
      "returns": "Array - Requested number of 32 byte long storage keys for the given account or `null` if Fat DB is not enabled.",
      "inputFormatters": [
        null,
        null,
        null,
        "inputDefaultBlockNumberFormatter"
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_listVaults",
      "desc": "Returns a list of all available vaults",
      "params": [],
      "returns": "Array - Names of all available vaults",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_localTransactions",
      "desc": "Returns an object of current and past local transactions.",
      "params": [],
      "returns": "Object - Mapping of transaction hashes to status objects status object.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_lockedHardwareAccountsInfo",
      "desc": "Provides a list of paths to locked hardware wallets",
      "params": [],
      "returns": "Array - Paths of all locked hardware wallets",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_minGasPrice",
      "desc": "Returns currently set minimal gas price",
      "params": [],
      "returns": "Quantity - Minimal Gas Price",
      "inputFormatters": [],
      "outputFormatter": "outputBigNumberFormatter"
    },
    {
      "name": "parity_mode",
      "desc": "Get the mode. Results one of: `\"active\"`, `\"passive\"`, `\"dark\"`, `\"offline\"`.",
      "params": [],
      "returns": "String - The mode.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_netChain",
      "desc": "Returns the name of the connected chain. DEPRECATED use `parity_chain` instead.",
      "params": [],
      "returns": "String - chain name.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_netPeers",
      "desc": "Returns number of peers.",
      "params": [],
      "returns": {
        "desc": "Object - Number of peers",
        "details": {
          "active": "Quantity - Number of active peers.",
          "connected": "Quantity - Number of connected peers.",
          "max": "Quantity - Maximum number of connected peers.",
          "peers": "Array - List of all peers with details."
        }
      },
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_netPort",
      "desc": "Returns network port the node is listening on.",
      "params": [],
      "returns": "Quantity - Port number",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_newAccountFromPhrase",
      "desc": "Creates a new account from a recovery phrase.",
      "params": [
        "String - Recovery phrase.",
        "String - Password."
      ],
      "returns": "Address - The created address.",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_newAccountFromSecret",
      "desc": "Creates a new account from a private ethstore secret key.",
      "params": [
        "Data - Secret, 32-byte hex",
        "String - Password"
      ],
      "returns": "Address - The created address.",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_newAccountFromWallet",
      "desc": "Creates a new account from a JSON import",
      "params": [
        "String - Wallet JSON encoded to a string.",
        "String - Password."
      ],
      "returns": "Address - The created address",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_newVault",
      "desc": "Creates a new vault with the given name & password",
      "params": [
        "String - Vault name",
        "String - Password"
      ],
      "returns": "Boolean - True on success",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_nextNonce",
      "desc": "Returns next available nonce for transaction from given account. Includes pending block and transaction queue.",
      "params": [
        "Address - Account"
      ],
      "returns": "Quantity - Next valid nonce",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_nodeKind",
      "desc": "Returns the node type availability and capability",
      "params": [],
      "returns": {
        "desc": "Object - Availability and Capability.",
        "details": {
          "availability": "String - Availability, either `personal` or `public`.",
          "capability": "String - Capability, either `full` or `light`."
        }
      },
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_nodeName",
      "desc": "Returns node name, set when starting parity with `--identity NAME`.",
      "params": [],
      "returns": "String - Node name.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_openVault",
      "desc": "Opens a vault with the given name & password",
      "params": [
        "String - Vault name",
        "String - Password"
      ],
      "returns": "Boolean - True on success",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_pendingTransactions",
      "desc": "Returns a list of transactions currently in the queue.",
      "params": [],
      "returns": "Array - Transactions ordered by priority",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_pendingTransactionsStats",
      "desc": "Returns propagation stats for transactions in the queue.",
      "params": [],
      "returns": "Object - mapping of transaction hashes to stats.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_phraseToAddress",
      "desc": "Converts a secret phrase into the corresponding address.",
      "params": [
        "String - The phrase"
      ],
      "returns": "Address - Corresponding address",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_postSign",
      "desc": "Request an arbitrary transaction to be signed by an account.",
      "params": [
        "Address - Account address.",
        "Hash - Transaction hash."
      ],
      "returns": "Quantity - The id of the request to the signer. If the account was already unlocked, returns `Hash` of the transaction instead.",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_postTransaction",
      "desc": "Posts a transaction to the signer without waiting for the signer response.",
      "params": [
        "TransactionRequest - see [`eth_sendTransaction`](JSONRPC-eth-module#eth_sendtransaction)."
      ],
      "returns": "Quantity - The id of the request to the signer. If the account was already unlocked, returns `Hash` of the transaction instead.",
      "inputFormatters": [
        "inputCallFormatter"
      ],
      "outputFormatter": "utils.toDecimal"
    },
    {
      "name": "parity_registryAddress",
      "desc": "The address for the global registry.",
      "params": [],
      "returns": "Address - The registry address.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_releasesInfo",
      "desc": "returns a ReleasesInfo object describing the current status of releases",
      "params": [],
      "returns": {
        "desc": "Object - Information on current releases, `null` if not available.",
        "details": {
          "fork": "Quantity - Block number representing the last known fork for this chain, which may be in the future.",
          "minor": "Object - Information about latest minor update to current version, `null` if this is the latest minor version.",
          "track": "Object - Information about the latest release in this track."
        }
      },
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_removeAddress",
      "desc": "Removes an address from the addressbook.",
      "params": [
        "Address - The address to remove."
      ],
      "returns": "Boolean - `true`if the call was successful.",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_removeReservedPeer",
      "desc": "Remove a reserved peer.",
      "params": [
        "String - Encode address"
      ],
      "returns": "Boolean - `true` if successful.",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_removeTransaction",
      "desc": "Removes transaction from local transaction pool. Scheduled transactions and not-propagated transactions are safe to remove, removal of other transactions may have no effect though.",
      "params": [
        "Hash - Hash of transaction to remove."
      ],
      "returns": {
        "desc": "Object - Removed transaction or `null`.",
        "details": {
          "blockHash": "Hash - 32 Bytes - hash of the block where this transaction was in. `null` when its pending.",
          "blockNumber": "BlockNumber - Block number where this transaction was in. `null` when its pending.",
          "chainId": "Quantity - The chain id of the transaction, if any.",
          "condition": "Object - (optional) Conditional submission, Block number in `block` or timestamp in `time` or `null`.",
          "creates": "Address - (optional) Address of a created contract or `null`.",
          "from": "Address - 20 Bytes - address of the sender.",
          "gas": "Quantity - Gas provided by the sender.",
          "gasPrice": "Quantity - Gas price provided by the sender in Wei.",
          "hash": "Hash - 32 Bytes - hash of the transaction.",
          "input": "Data - The data send along with the transaction.",
          "nonce": "Quantity - The number of transactions made by the sender prior to this one.",
          "publicKey": "Data - Public key of the signer.",
          "r": "Quantity - The R field of the signature.",
          "raw": "Data - Raw transaction data.",
          "s": "Quantity - The S field of the signature.",
          "standardV": "Quantity - The standardized V field of the signature (0 or 1).",
          "to": "Address - 20 Bytes - address of the receiver. `null` when its a contract creation transaction.",
          "transactionIndex": "Quantity - Integer of the transactions index position in the block. `null` when its pending.",
          "v": "Quantity - The V field of the signature.",
          "value": "Quantity - Value transferred in Wei."
        }
      },
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_rpcSettings",
      "desc": "Provides current JSON-RPC API settings.",
      "params": [],
      "returns": {
        "desc": "Object - JSON-RPC settings.",
        "details": {
          "enabled": "Boolean - `true` if JSON-RPC is enabled (default).",
          "interface": "String - Interface on which JSON-RPC is running.",
          "port": "Quantity - Port on which JSON-RPC is running."
        }
      },
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_setAccountMeta",
      "desc": "Sets metadata for the account",
      "params": [
        "Address - Address",
        "String - Metadata (JSON encoded)"
      ],
      "returns": "Boolean - `true` if the call was successful.",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_setAccountName",
      "desc": "Sets a name for the account",
      "params": [
        "Address - Address",
        "String - Name"
      ],
      "returns": "Boolean - `true` if the call was successful.",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_setAuthor",
      "desc": "Changes author (coinbase) for mined blocks.",
      "params": [
        "Address - 20 Bytes - Address"
      ],
      "returns": "Boolean - `true` if the call was successful.",
      "inputFormatters": [
        "inputAddressFormatter"
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_setChain",
      "desc": "Sets the network spec file Parity is using.",
      "params": [
        "String - Chain spec name, one of: \"foundation\", \"ropsten\", \"morden\", \"kovan\", \"olympic\", \"classic\", \"dev\", \"expanse\", \"musicoin\" or a filename."
      ],
      "returns": "Boolean - `true` if the call succeeded.",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_setDappAddresses",
      "desc": "Sets the available addresses for a dapp. When provided with non-empty list changes the default account as well.",
      "params": [
        "String - Dapp Id.",
        "Array - Array of available accounts available to the dapp or `null` for default list."
      ],
      "returns": "Boolean - `true` if the call was successful.",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_setDappDefaultAddress",
      "desc": "Changes dapp default address. Does not affect other accounts exposed for this dapp, but default account will always be retured as the first one.",
      "params": [
        "String - Dapp Id.",
        "Address - Default Address."
      ],
      "returns": "Boolean - `true` if the call was successful",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_setEngineSigner",
      "desc": "Sets an authority account for signing consensus messages. For more information check the [[Proof of Authority Chains]] page.",
      "params": [
        "Address - Identifier of a valid authority account.",
        "String - Passphrase to unlock the account."
      ],
      "returns": "Boolean - True if the call succeeded",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_setExtraData",
      "desc": "Changes extra data for newly mined blocks",
      "params": [
        "Data - Extra Data"
      ],
      "returns": "Boolean - whether the call was successful",
      "inputFormatters": [
        "utils.toHex"
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_setGasCeilTarget",
      "desc": "Sets new gas ceiling target for mined blocks.",
      "params": [
        "Quantity - (default: `0x0`) Gas ceiling target."
      ],
      "returns": "Boolean - `true` if the call was successful.",
      "inputFormatters": [
        "utils.toHex"
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_setGasFloorTarget",
      "desc": "Sets a new gas floor target for mined blocks..",
      "params": [
        "Quantity - (default: `0x0`) Gas floor target."
      ],
      "returns": "Boolean - `true` if the call was successful.",
      "inputFormatters": [
        "utils.toHex"
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_setMaxTransactionGas",
      "desc": "Sets the maximum amount of gas a single transaction may consume.",
      "params": [
        "Quantity - Gas amount"
      ],
      "returns": "Boolean - `true` if the call was successful.",
      "inputFormatters": [
        "utils.toHex"
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_setMinGasPrice",
      "desc": "Changes minimal gas price for transaction to be accepted to the queue.",
      "params": [
        "Quantity - Minimal gas price"
      ],
      "returns": "Boolean - whether the call was successful",
      "inputFormatters": [
        "utils.toHex"
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_setMode",
      "desc": "Changes the operating mode of Parity.",
      "params": [
        "String - The mode to set, one of:\n  * `\"active\"` - Parity continuously syncs the chain.\n  * `\"passive\"` - Parity syncs initially, then sleeps and wakes regularly to resync.\n  * `\"dark\"` - Parity syncs only when the RPC is active.\n  * `\"offline\"` - Parity doesn't sync.\n"
      ],
      "returns": "Boolean - `true` if the call succeeded.",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_setNewDappsAddresses",
      "desc": "Sets the list of accounts available to new dapps.",
      "params": [
        "Array - List of accounts available by default or `null` for all accounts."
      ],
      "returns": "Boolean - `true` if the call was successful",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_setNewDappsDefaultAddress",
      "desc": "Changes global default address. This setting may be overriden for a specific dapp.",
      "params": [
        "Address - Default Address."
      ],
      "returns": "Boolean - `true` if the call was successful",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_setTransactionsLimit",
      "desc": "Changes limit for transactions in queue.",
      "params": [
        "Quantity - New Limit"
      ],
      "returns": "Boolean - whether the call was successful",
      "inputFormatters": [
        "utils.toHex"
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_setVaultMeta",
      "desc": "Sets the metadata for a specific vault",
      "params": [
        "String - Vault name",
        "String - The metadata as a JSON string"
      ],
      "returns": "Boolean - The boolean call result, true on success",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_signMessage",
      "desc": "Sign the hashed message bytes with the given account.",
      "params": [
        "Address - Account which signs the message.",
        "String - Passphrase to unlock the account.",
        "Data - Hashed message."
      ],
      "returns": "Data - Message signature.",
      "inputFormatters": [
        null,
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_subscribe",
      "desc": "\nStarts a subscription (on WebSockets / IPC / TCP transports) to results of calling some other RPC method.\nFor every change in returned value of that RPC call a JSON-RPC notification with result and subscription ID will be sent to a client.\n\nAn example notification received by subscribing to `eth_accounts` RPC method:\n```\n{\"jsonrpc\":\"2.0\",\"method\":\"parity_subscription\",\"params\":{\"subscription\":\"0x416d77337e24399d\",\"result\":[\"0xcd2a3d9f938e13cd947ec05abc7fe734df8dd826\"]}}\n```\n\nYou can unsubscribe using `parity_unsubscribe` RPC method. Subscriptions are also tied to a transport\nconnection, disconnecting causes all subscriptions to be canceled.\n    ",
      "params": [
        "String - RPC method name",
        "Array - Parameters passed to RPC method. (Optional, defaults to no parameters)"
      ],
      "returns": "String - Assigned subscription ID",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_testPassword",
      "desc": "Checks if a given password can unlock a given account, without actually unlocking it.",
      "params": [
        "Address - Account to test.",
        "String - Password to test."
      ],
      "returns": "Boolean - `true` if the account and password are valid.",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_transactionsLimit",
      "desc": "Changes limit for transactions in queue.",
      "params": [],
      "returns": "Quantity - Current max number of transactions in queue.",
      "inputFormatters": [],
      "outputFormatter": "outputBigNumberFormatter"
    },
    {
      "name": "parity_unsignedTransactionsCount",
      "desc": "Returns number of unsigned transactions when running with Trusted Signer. Error otherwise",
      "params": [],
      "returns": "Quantity - Number of unsigned transactions",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_unsubscribe",
      "desc": "Unsubscribes from a subscription.",
      "params": [
        "String - Subscription ID"
      ],
      "returns": "Boolean - whether the call was successful",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "parity_upgradeReady",
      "desc": "Returns a ReleaseInfo object describing the release which is available for upgrade or `null` if none is available.",
      "params": [],
      "returns": {
        "desc": "Object - Details or `null` if no new release is available.",
        "details": {
          "binary": "Data - (optional) Keccak-256 checksum of the release parity binary, if known.",
          "fork": "Quantity - The latest fork that this release can handle.",
          "is_critical": "Boolean - Does this release contain critical security updates?",
          "version": "Object - Information on the version."
        }
      },
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_versionInfo",
      "desc": "Provides information about running version of Parity.",
      "params": [],
      "returns": {
        "desc": "Object - Information on current version.",
        "details": {
          "hash": "Hash - 20 Byte hash of the current build.",
          "track": "String - Track on which it was released, one of: `\"stable\"`, `\"beta\"`, `\"nightly\"`, `\"testing\"`, `\"null\"` (unknown or self-built).",
          "version": "Object - Version number composed of `major`, `minor` and `patch` integers."
        }
      },
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "parity_wsUrl",
      "desc": "Returns the hostname and the port of WebSockets/Signer server, error if not enabled.",
      "params": [],
      "returns": "String - The hostname and port number",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "personal_listAccounts",
      "desc": "Lists all stored accounts.",
      "params": [],
      "returns": "Array - A list of 20 byte account identifiers.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "personal_newAccount",
      "desc": "Creates new account.\n\n**Note:** it becomes the new current unlocked account. There can only be one unlocked account at a time.",
      "params": [
        "String - Password for the new account."
      ],
      "returns": "Address - 20 Bytes - The identifier of the new account.",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "personal_sendTransaction",
      "desc": "Sends transaction and signs it in a single call. The account does not need to be unlocked to make this call, and will not be left unlocked after.",
      "params": [
        "TransactionRequest - The transaction object",
        "String - Passphrase to unlock the `from` account."
      ],
      "returns": "Data - 32 Bytes - the transaction hash, or the zero hash if the transaction is not yet available",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "personal_unlockAccount",
      "desc": "Unlocks specified account for use.\n\nIf permanent unlocking is disabled (the default) then the duration argument will be ignored, and the account will be unlocked for a single signing. With permanent locking enabled, the duration sets the number of seconds to hold the account open for. It will default to 300 seconds. Passing 0 unlocks the account indefinitely.\n\nThere can only be one unlocked account at a time.",
      "params": [
        "Address - 20 Bytes - The address of the account to unlock.",
        "String - Passphrase to unlock the account.",
        "Quantity - (default: 300) Integer or `null` - Duration in seconds how long the account should remain unlocked for."
      ],
      "returns": "Boolean - whether the call was successful",
      "inputFormatters": [
        null,
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "shh_addPrivateKey",
      "desc": "Import a private key to use for asymmetric decryption.",
      "params": [
        "Data - 32 Bytes - The private key to import"
      ],
      "returns": "Data - `32 Bytes`  A unique identity to refer to this keypair by.",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "shh_deleteKey",
      "desc": "Delete the key or key pair denoted by the given identity.",
      "params": [
        "Data - `32 Bytes` - The identity to remove."
      ],
      "returns": "Data - `true` on successful removal, `false` on unknown identity",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "shh_deleteMessageFilter",
      "desc": "Delete a message filter by identifier",
      "params": [
        "Data - `32 bytes` - The identity of the filter to delete."
      ],
      "returns": "Boolean - `true` on deletion, `false` on unrecognized ID.",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "shh_getFilterMessages",
      "desc": "Polling method for whisper filters. Returns new messages since the last call of this method.\n**Note** calling the [shh_getMessages](#shh_getmessages) method, will reset the buffer for this method, so that you won't receive duplicate messages.",
      "params": [
        "Data - `32 bytes` - Unique identity to fetch changes for."
      ],
      "returns": "Array - Array of `messages` received since last poll",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "shh_getFilterMesssages",
      "desc": "Uninstalls a filter with given id. Should always be called when watch is no longer needed.\nAdditonally Filters timeout when they aren't requested with [shh_getFilterChanges](#shh_getfilterchanges) for a period of time.",
      "params": [
        "Quantity - The filter id"
      ],
      "returns": "Boolean - `true` if the filter was successfully uninstalled, otherwise `false`",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "shh_getPrivateKey",
      "desc": "Get the private key associated with an asymmetric identity.",
      "params": [
        "Data - 32 Bytes - The identity to fetch the private key for."
      ],
      "returns": "Data - `32 Bytes` - The private key of the asymmetric identity.",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "shh_getPublicKey",
      "desc": "Get the public key associated with an asymmetric identity.",
      "params": [
        "Data - 32 Bytes - The identity to fetch the public key for."
      ],
      "returns": "Data - `64 Bytes` - The public key of the asymmetric identity.",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "shh_getSymKey",
      "desc": "Get the key associated with a symmetric identity.",
      "params": [
        "Data - `32 Bytes` - The identity to fetch the key for."
      ],
      "returns": "Data - `64 Bytes` - The key of the asymmetric identity.",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "shh_info",
      "desc": "Returns the current whisper protocol version.",
      "params": [],
      "returns": {
        "desc": "Object - The current whisper protocol version",
        "details": {
          "memory": "Quantity - Amount of memory used by messages in the pool.",
          "messages": "Quantity - Number of messages in the pool.",
          "minPow": "Float - required PoW threshold for a message to be accepted into the local pool, or null if there is empty space in the pool.",
          "targetMemory": "Quantity - Target amount of memory for the pool."
        }
      },
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "shh_newKeyPair",
      "desc": "Generate a new key pair (identity) for asymmetric encryption.",
      "params": [],
      "returns": "Data - 32 Bytes - the address of the new identiy",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "shh_newMessageFilter",
      "desc": "Create a new polled filter for messages.",
      "params": [
        {
          "desc": "Object - The filter options:",
          "details": {
            "decryptWith": "Data - `32 bytes` - Identity of key used for description. null if listening for broadcasts.",
            "from": "Data - (optional) `32 Bytes` - if present, only accept messages signed by this key.",
            "topics": "Array - Array of `Data`. Only accept messages matching these topics. Should be non-empty."
          }
        }
      ],
      "returns": "Data - `32 bytes` - Unique identity for this filter.",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "shh_newSymKey",
      "desc": "Generate a key pair(identity) for symmetric encryption.",
      "params": [],
      "returns": "Data - 32 Bytes - the address of the new identiy",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "shh_post",
      "desc": "Sends a whisper message.",
      "params": [
        {
          "desc": "Object - The whisper post object:",
          "details": {
            "from": "Data - (optional) 60 Bytes - The identity of the sender",
            "payload": "Data - The payload of the message",
            "priority": "Quantity - The integer of the priority in a rang from ... (?)",
            "to": "Data - (optional) 60 Bytes - The identity of the receiver. When present whisper will encrypt the message so that only the receiver can decrypt it",
            "topics": "Array - Array of `Data` topics, for the receiver to identify messages",
            "ttl": "Quantity - Integer of the time to live in seconds."
          }
        }
      ],
      "returns": "Boolean - `true` if the message was send, otherwise `false`",
      "inputFormatters": [
        "inputPostFormatter"
      ],
      "outputFormatter": null
    },
    {
      "name": "shh_subscribe",
      "desc": "Open a subscription to a filter.",
      "params": [
        "Data - See [shh_newMessageFilter](#shh_newmessagefilter)"
      ],
      "returns": "Quantity - Unique subscription identifier",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "shh_unsubscribe",
      "desc": "Close a subscribed filter",
      "params": [
        "Quantity - Unique subscription identifier"
      ],
      "returns": "Boolean - `true` on success, `false` on unknown subscription ID.",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "signer_confirmRequest",
      "desc": "Confirm a request in the signer queue",
      "params": [
        "Quantity - The request id.",
        {
          "desc": "Object - Modify the transaction before confirmation.",
          "details": {
            "condition": "Object - (optional) Condition for scheduled transaction. Can be either an integer block number `{ block: 1 }` or UTC timestamp (in seconds) `{ timestamp: 1491290692 }`.",
            "gas": "Quantity - (optional) Gas provided by the sender in Wei.",
            "gasPrice": "Quantity - (optional) Modify the gas price provided by the sender in Wei."
          }
        },
        "String - The account password"
      ],
      "returns": "Object - The status of the confirmation, depending on the request type.",
      "inputFormatters": [
        null,
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "signer_confirmRequestRaw",
      "desc": "Confirm a request in the signer queue providing signed request.",
      "params": [
        "Quantity - Integer - The request id",
        "Data - Signed request (RLP encoded transaction)"
      ],
      "returns": "Object - The status of the confirmation, depending on the request type.",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "signer_confirmRequestWithToken",
      "desc": "Confirm specific request with rolling token.",
      "params": [
        "Quantity - The request id.",
        {
          "desc": "Object - Modify the transaction before confirmation.",
          "details": {
            "condition": "Object - (optional) Conditional submission of the transaction. Can be either an integer block number `{ block: 1 }` or UTC timestamp (in seconds) `{ time: 1491290692 }` or `null`.",
            "gas": "Quantity - (optional) Gas provided by the sender in Wei.",
            "gasPrice": "Quantity - (optional) Modify the gas price provided by the sender in Wei."
          }
        },
        "String - Password (initially) or a token returned by the previous call."
      ],
      "returns": {
        "desc": "Object - Status.",
        "details": {
          "result": "Object - The status of the confirmation, depending on the request type.",
          "token": "String - Token used to authenticate the next request."
        }
      },
      "inputFormatters": [
        null,
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "signer_generateAuthorizationToken",
      "desc": "Generates a new authorization token.",
      "params": [],
      "returns": "String - The new authorization token.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "signer_generateWebProxyAccessToken",
      "desc": "Generates a new web proxy access token.",
      "params": [
        "String - Domain for which the token is valid. Only requests to this domain will be allowed."
      ],
      "returns": "String - The new web proxy access token.",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "signer_rejectRequest",
      "desc": "Rejects a request in the signer queue",
      "params": [
        "Quantity - Integer - The request id"
      ],
      "returns": "Boolean - The status of the rejection",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "signer_requestsToConfirm",
      "desc": "Returns a list of the transactions awaiting authorization.",
      "params": [],
      "returns": "Array - A list of the outstanding transactions.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "signer_signerEnabled",
      "desc": "Returns whether signer is enabled/disabled.",
      "params": [],
      "returns": "Boolean - `true` when enabled, `false` when disabled.",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "signer_subscribePending",
      "desc": "\nStarts a subscription for transactions in the confirmation queue.\nEach event contains all transactions currently in the queue.\n\nAn example notification received by subscribing to this event:\n```\n{\"jsonrpc\":\"2.0\",\"method\":\"signer_pending\",\"params\":{\"subscription\":\"0x416d77337e24399d\",\"result\":[]}}\n```\n\nYou can unsubscribe using `signer_unsubscribePending` RPC method. Subscriptions are also tied to a transport\nconnection, disconnecting causes all subscriptions to be canceled.\n    ",
      "params": [],
      "returns": "String - Assigned subscription ID",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "signer_unsubscribePending",
      "desc": "Unsubscribes from pending transactions subscription.",
      "params": [
        "String - Subscription ID"
      ],
      "returns": "Boolean - whether the call was successful",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "trace_block",
      "desc": "Returns traces created at given block.",
      "params": [
        "BlockNumber - Integer of a block number, or the string `'earliest'`, `'latest'` or `'pending'`."
      ],
      "returns": "Array - Block traces.",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "trace_call",
      "desc": "Executes the given call and returns a number of possible traces for it.",
      "params": [
        "CallRequest - Call options, same as `eth_call`.",
        "Array - Type of trace, one or more of: `\"vmTrace\"`, `\"trace\"`, `\"stateDiff\"`.",
        "BlockNumber - (optional) Integer of a block number, or the string `'earliest'`, `'latest'` or `'pending'`."
      ],
      "returns": "Array - Block traces",
      "inputFormatters": [
        null,
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "trace_filter",
      "desc": "Returns traces matching given filter",
      "params": [
        {
          "desc": "Object - The filter object",
          "details": {
            "after": "Quantity - (optional) The offset trace number",
            "count": "Quantity - (optional) Integer number of traces to display in a batch.",
            "fromAddress": "Array - (optional) Sent from these addresses.",
            "fromBlock": "BlockNumber - (optional) From this block.",
            "toAddress": "Address - (optional) Sent to these addresses.",
            "toBlock": "BlockNumber - (optional) To this block."
          }
        }
      ],
      "returns": "Array - Traces matching given filter",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "trace_get",
      "desc": "Returns trace at given position.",
      "params": [
        "Hash - Transaction hash.",
        "Array - Index positions of the traces."
      ],
      "returns": "Object - Trace object",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "trace_rawTransaction",
      "desc": "Traces a call to `eth_sendRawTransaction` without making the call, returning the traces",
      "params": [
        "Data - Raw transaction data.",
        "Array - Type of trace, one or more of: `\"vmTrace\"`, `\"trace\"`, `\"stateDiff\"`."
      ],
      "returns": "Object - Block traces.",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "trace_replayTransaction",
      "desc": "Replays a transaction, returning the traces.",
      "params": [
        "Hash - Transaction hash.",
        "Array - Type of trace, one or more of: `\"vmTrace\"`, `\"trace\"`, `\"stateDiff\"`."
      ],
      "returns": "Object - Block traces.",
      "inputFormatters": [
        null,
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "trace_transaction",
      "desc": "Returns all traces of given transaction",
      "params": [
        "Hash - Transaction hash"
      ],
      "returns": "Array - Traces of given transaction",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    },
    {
      "name": "web3_clientVersion",
      "desc": "Returns the current client version.",
      "params": [],
      "returns": "String - The current client version",
      "inputFormatters": [],
      "outputFormatter": null
    },
    {
      "name": "web3_sha3",
      "desc": "Returns Keccak-256 (**not** the standardized SHA3-256) of the given data.",
      "params": [
        "String - The data to convert into a SHA3 hash."
      ],
      "returns": "Data - The Keccak-256 hash of the given string.",
      "inputFormatters": [
        null
      ],
      "outputFormatter": null
    }
  ]
}