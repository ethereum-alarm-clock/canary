'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}} // Copyright 2015-2017 Parity Technologies (UK) Ltd.
// This file is part of Parity.

// Parity is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity.  If not, see <http://www.gnu.org/licenses/>.
var _require =
require('../format/output'),outTransaction = _require.outTransaction;var

Signer = function () {
  function Signer(updateSubscriptions, api, subscriber) {var _this = this;_classCallCheck(this, Signer);
    this._subscriber = subscriber;
    this._api = api;
    this._updateSubscriptions = updateSubscriptions;
    this._started = false;

    this._listRequests = this._listRequests.bind(this);

    this._api.provider.on('close', function () {
      if (_this.isStarted) {
        _this.start();
      }
    });
  }_createClass(Signer, [{ key: 'start', value: function start()





    {var _this2 = this;
      this._started = true;

      if (this._api.isPubSub) {
        var subscription = this._api.pubsub.
        subscribeAndGetResult(
        function (callback) {return _this2._api.pubsub.signer.pendingRequests(callback);},
        function (requests) {
          _this2.updateSubscriptions(requests);
          return requests;
        });


        return Promise.all([
        this._listRequests(false),
        subscription]);

      }

      return Promise.all([
      this._listRequests(true),
      this._loggingSubscribe()]);

    } }, { key: 'updateSubscriptions', value: function updateSubscriptions(

    requests) {
      return this._updateSubscriptions('signer_requestsToConfirm', null, requests);
    } }, { key: '_listRequests', value: function _listRequests(

    doTimeout) {var _this3 = this;
      var nextTimeout = function nextTimeout() {var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;var forceTimeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : doTimeout;
        if (forceTimeout) {
          setTimeout(function () {
            _this3._listRequests(doTimeout);
          }, timeout);
        }
      };

      if (!this._api.isConnected) {
        nextTimeout(500, true);
        return;
      }

      return this._api.signer.
      requestsToConfirm().
      then(function (requests) {
        _this3.updateSubscriptions(requests);
        nextTimeout();
      }).
      catch(function () {return nextTimeout();});
    } }, { key: '_postTransaction', value: function _postTransaction(

    data) {
      var request = {
        transaction: outTransaction(data.params[0]),
        requestId: data.json.result.result };


      this._updateSubscriptions('parity_postTransaction', null, request);
    } }, { key: '_loggingSubscribe', value: function _loggingSubscribe()

    {var _this4 = this;
      return this._subscriber.subscribe('logging', function (error, data) {
        if (error || !data) {
          return;
        }

        switch (data.method) {
          case 'eth_sendTransaction':
          case 'eth_sendRawTransaction':
            _this4._listRequests(false);
            break;

          case 'parity_postTransaction':
            _this4._postTransaction(data);
            _this4._listRequests(false);
            break;}

      });
    } }, { key: 'isStarted', get: function get() {return this._started;} }]);return Signer;}();


module.exports = Signer;