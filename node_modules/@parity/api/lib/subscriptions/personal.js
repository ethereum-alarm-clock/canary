'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}} // Copyright 2015-2017 Parity Technologies (UK) Ltd.
// This file is part of Parity.

// Parity is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity.  If not, see <http://www.gnu.org/licenses/>.
var
Personal = function () {
  function Personal(updateSubscriptions, api, subscriber) {var _this = this;_classCallCheck(this, Personal);
    this._subscriber = subscriber;
    this._api = api;
    this._updateSubscriptions = updateSubscriptions;
    this._started = false;

    this._lastDefaultAccount = '0x0';
    this._pollTimerId = null;

    this._accountsInfo = this._accountsInfo.bind(this);
    this._defaultAccount = this._defaultAccount.bind(this);
    this._listAccounts = this._listAccounts.bind(this);

    this._api.provider.on('close', function () {
      if (_this.isStarted) {
        _this.start();
      }
    });
  }_createClass(Personal, [{ key: 'start', value: function start()





    {var _this2 = this;
      this._started = true;

      var defaultAccount = null;

      if (this._api.isPubSub) {
        defaultAccount = this._api.pubsub.
        subscribeAndGetResult(
        function (callback) {return _this2._api.pubsub.parity.defaultAccount(callback);},
        function (defaultAccount) {
          _this2.updateDefaultAccount(defaultAccount);
          return defaultAccount;
        });

      } else {
        defaultAccount = this._defaultAccount();
      }

      return Promise.all([
      defaultAccount,
      this._listAccounts(),
      this._accountsInfo(),
      this._loggingSubscribe()]);

    } }, { key: 'updateDefaultAccount', value: function updateDefaultAccount(

    defaultAccount) {
      if (this._lastDefaultAccount !== defaultAccount) {
        this._lastDefaultAccount = defaultAccount;
        this._updateSubscriptions('parity_defaultAccount', null, defaultAccount);
      }
    }

    // FIXME: Because of the different API instances, the "wait for valid changes" approach
    // doesn't work. Since the defaultAccount is critical to operation, we poll in exactly
    // same way we do in ../eth (ala eth_blockNumber) and update. This should be moved
    // to pub-sub as it becomes available
  }, { key: '_defaultAccount', value: function _defaultAccount() {var _this3 = this;var timerDisabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var nextTimeout = function nextTimeout() {var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3000;
        if (!timerDisabled) {
          _this3._pollTimerId = setTimeout(function () {
            _this3._defaultAccount();
          }, timeout);
        }
      };

      if (!this._api.isConnected) {
        nextTimeout(500);
        return;
      }

      return this._api.parity.
      defaultAccount().
      then(function (defaultAccount) {
        _this3.updateDefaultAccount(defaultAccount);
        nextTimeout();
      }).
      catch(function () {return nextTimeout();});
    } }, { key: '_listAccounts', value: function _listAccounts()

    {var _this4 = this;
      return this._api.eth.
      accounts().
      then(function (accounts) {
        _this4._updateSubscriptions('eth_accounts', null, accounts);
      });
    } }, { key: '_accountsInfo', value: function _accountsInfo()

    {var _this5 = this;
      return this._api.parity.
      accountsInfo().
      then(function (info) {
        _this5._updateSubscriptions('parity_accountsInfo', null, info);

        return _this5._api.parity.
        allAccountsInfo().
        catch(function () {
          // NOTE: This fails on non-secure APIs, swallow error
          return {};
        }).
        then(function (allInfo) {
          _this5._updateSubscriptions('parity_allAccountsInfo', null, allInfo);
        });
      });
    } }, { key: '_loggingSubscribe', value: function _loggingSubscribe()

    {var _this6 = this;
      return this._subscriber.subscribe('logging', function (error, data) {
        if (error || !data) {
          return;
        }

        switch (data.method) {
          case 'parity_closeVault':
          case 'parity_openVault':
          case 'parity_killAccount':
          case 'parity_importGethAccounts':
          case 'parity_newAccountFromPhrase':
          case 'parity_newAccountFromWallet':
          case 'personal_newAccount':
            _this6._defaultAccount(true);
            _this6._listAccounts();
            _this6._accountsInfo();
            break;

          case 'parity_removeAddress':
          case 'parity_setAccountName':
          case 'parity_setAccountMeta':
            _this6._accountsInfo();
            break;

          case 'parity_setDappAddresses':
          case 'parity_setDappDefaultAddress':
          case 'parity_setNewDappsAddresses':
          case 'parity_setNewDappsDefaultAddress':
            _this6._defaultAccount(true);
            _this6._listAccounts();
            break;}

      });
    } }, { key: 'isStarted', get: function get() {return this._started;} }]);return Personal;}();


module.exports = Personal;