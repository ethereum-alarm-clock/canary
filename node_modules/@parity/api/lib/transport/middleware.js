"use strict";var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}} // Copyright 2015-2017 Parity Technologies (UK) Ltd.
// This file is part of Parity.

// Parity is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity.  If not, see <http://www.gnu.org/licenses/>.
var
Middleware = function () {
  function Middleware(transport) {_classCallCheck(this, Middleware);
    this._transport = transport;
    this._subscribe = transport.subscribe;

    transport.subscribe = this.handleSubscribe.bind(this);

    this._handlers = {};
    this._subHandlers = {};
  }_createClass(Middleware, [{ key: "registerSubscribe", value: function registerSubscribe(

    method, handler) {
      if (method in this._subHandlers) {
        throw new Error(method + " is already defined in the middleware!");
      }

      this._subHandlers[method] = handler;
    } }, { key: "register", value: function register(

    method, handler) {
      if (method in this._handlers) {
        throw new Error(method + " is already defined in the middleware!");
      }

      this._handlers[method] = handler;
    } }, { key: "handleSubscribe", value: function handleSubscribe(

    api, callback, event) {
      // Don't ask
      var method = api.subscribe ? api.subscribe : event[0];
      var params = event.length === 2 ? event[1] : event;

      var handler = this._subHandlers[method];

      if (handler) {
        return handler(params, callback);
      }

      this._subscribe.call(this._transport, api, callback, event);
    } }, { key: "handle", value: function handle(

    method, params) {
      var handler = this._handlers[method];

      if (handler) {
        return handler(params);
      }

      return null;
    } }, { key: "rpcRequest", value: function rpcRequest(

    method, params) {
      return this._transport._execute(method, params);
    } }]);return Middleware;}();


module.exports = Middleware;