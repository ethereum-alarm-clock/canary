'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} // Copyright 2015-2017 Parity Technologies (UK) Ltd.
// This file is part of Parity.

// Parity is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity.  If not, see <http://www.gnu.org/licenses/>.
var _require =
require('../../subscriptions'),Logging = _require.Logging;
var JsonRpcBase = require('../jsonRpcBase');
var TransportError = require('../error');

/* global fetch */var
Http = function (_JsonRpcBase) {_inherits(Http, _JsonRpcBase);
  function Http(url) {var connectTimeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;_classCallCheck(this, Http);var _this = _possibleConstructorReturn(this, (Http.__proto__ || Object.getPrototypeOf(Http)).call(this));


    _this._connected = true;
    _this._url = url;
    _this._connectTimeout = connectTimeout;

    _this._pollConnection = _this._pollConnection.bind(_this);
    _this._pollConnection();return _this;
  }_createClass(Http, [{ key: '_encodeOptions', value: function _encodeOptions(

    method, params) {
      var json = this.encode(method, params);

      this.log(json);

      return {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
          'Content-Length': json.length },

        body: json };

    } }, { key: '_execute', value: function _execute(

    method, params) {var _this2 = this;
      var request = this._encodeOptions(method, params);

      return fetch(this._url, request).
      catch(function (error) {
        _this2._setDisconnected();
        throw error;
      }).
      then(function (response) {
        _this2._setConnected();

        if (response.status !== 200) {
          _this2._setDisconnected();
          _this2.error(JSON.stringify({ status: response.status, statusText: response.statusText }));
          console.error(method + '(' + JSON.stringify(params) + '): ' + response.status + ': ' + response.statusText);

          throw new Error(response.status + ': ' + response.statusText);
        }

        return response.json();
      }).
      then(function (response) {
        Logging.send(method, params, { request: request, response: response });

        if (response.error) {
          _this2.error(JSON.stringify(response));
          console.error(method + '(' + JSON.stringify(params) + '): ' + response.error.code + ': ' + response.error.message);

          var error = new TransportError(method, response.error.code, response.error.message);

          throw error;
        }

        _this2.log(JSON.stringify(response));
        return response.result;
      });
    } }, { key: '_pollConnection', value: function _pollConnection()

    {var _this3 = this;
      if (this._connectTimeout <= 0) {
        return;
      }

      var nextTimeout = function nextTimeout() {return setTimeout(_this3._pollConnection, _this3._connectTimeout);};

      this.
      execute('net_listening').
      then(function () {return nextTimeout();}).
      catch(function () {return nextTimeout();});
    } }, { key: 'url', set: function set(

    url) {
      this._url = url;
    } }]);return Http;}(JsonRpcBase);


module.exports = Http;