'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} // Copyright 2015-2017 Parity Technologies (UK) Ltd.
// This file is part of Parity.

// Parity is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity.  If not, see <http://www.gnu.org/licenses/>.

var PubsubBase = require('../pubsubBase');var _require =
require('../../format/input'),inAddress = _require.inAddress,inBlockNumber = _require.inBlockNumber,inData = _require.inData,inHex = _require.inHex,inDeriveHash = _require.inDeriveHash,inDeriveIndex = _require.inDeriveIndex;var _require2 =
require('../../format/output'),outAccountInfo = _require2.outAccountInfo,outAddress = _require2.outAddress,outBlock = _require2.outBlock,outChainStatus = _require2.outChainStatus,outHistogram = _require2.outHistogram,outHwAccountInfo = _require2.outHwAccountInfo,outNodeKind = _require2.outNodeKind,outNumber = _require2.outNumber,outPeers = _require2.outPeers,outTransaction = _require2.outTransaction,outAddresses = _require2.outAddresses,outRecentDapps = _require2.outRecentDapps,outVaultMeta = _require2.outVaultMeta;var

Parity = function (_PubsubBase) {_inherits(Parity, _PubsubBase);
  function Parity(provider) {_classCallCheck(this, Parity);var _this = _possibleConstructorReturn(this, (Parity.__proto__ || Object.getPrototypeOf(Parity)).call(this,
    provider));
    _this._api = 'parity';return _this;
  }

  // parity API
  _createClass(Parity, [{ key: 'accountsInfo', value: function accountsInfo(callback) {
      return this.addListener(this._api, 'parity_accountsInfo', function (error, data) {
        error ?
        callback(error) :
        callback(null, outAccountInfo(data));
      });
    } }, { key: 'allAccountsInfo', value: function allAccountsInfo(

    callback) {
      return this.addListener(this._api, 'parity_allAccountsInfo', function (error, data) {
        error ?
        callback(error) :
        callback(null, outAccountInfo(data));
      });
    } }, { key: 'hardwareAccountsInfo', value: function hardwareAccountsInfo(

    callback) {
      return this.addListener(this._api, 'parity_hardwareAccountsInfo', function (error, data) {
        error ?
        callback(error) :
        callback(null, outHwAccountInfo(data));
      });
    } }, { key: 'defaultAccount', value: function defaultAccount(

    callback) {
      return this.addListener(this._api, 'parity_defaultAccount', function (error, data) {
        error ?
        callback(error) :
        callback(null, outAddress(data));
      });
    } }, { key: 'transactionsLimit', value: function transactionsLimit(

    callback) {
      return this.addListener(this._api, 'parity_transactionsLimit', function (error, data) {
        error ?
        callback(error) :
        callback(null, outNumber(data));
      });
    } }, { key: 'extraData', value: function extraData(

    callback) {
      return this.addListener(this._api, 'parity_extraData', callback);
    } }, { key: 'gasFloorTarget', value: function gasFloorTarget(

    callback) {
      return this.addListener(this._api, 'parity_gasFloorTarget', function (error, data) {
        error ?
        callback(error) :
        callback(null, outNumber(data));
      });
    } }, { key: 'gasCeilTarget', value: function gasCeilTarget(

    callback) {
      return this.addListener(this._api, 'parity_gasCeilTarget', function (error, data) {
        error ?
        callback(error) :
        callback(null, outNumber(data));
      });
    } }, { key: 'minGasPrice', value: function minGasPrice(

    callback) {
      return this.addListener(this._api, 'parity_minGasPrice', function (error, data) {
        error ?
        callback(error) :
        callback(null, outNumber(data));
      });
    } }, { key: 'devLogs', value: function devLogs(

    callback) {
      return this.addListener(this._api, 'parity_devLogs', callback);
    } }, { key: 'devLogsLevels', value: function devLogsLevels(

    callback) {
      return this.addListener(this._api, 'parity_devLogsLevels', callback);
    } }, { key: 'netChain', value: function netChain(

    callback) {
      return this.addListener(this._api, 'parity_netChain', callback);
    } }, { key: 'netPeers', value: function netPeers(

    callback) {
      return this.addListener(this._api, 'parity_netPeers', function (error, data) {
        error ?
        callback(error) :
        callback(null, outPeers(data));
      });
    } }, { key: 'netPort', value: function netPort(

    callback) {
      return this.addListener(this._api, 'parity_netPort', function (error, data) {
        error ?
        callback(error) :
        callback(null, outNumber(data));
      });
    } }, { key: 'rpcSettings', value: function rpcSettings(

    callback) {
      return this.addListener(this._api, 'parity_rpcSettings', callback);
    } }, { key: 'nodeName', value: function nodeName(

    callback) {
      return this.addListener(this._api, 'parity_nodeName', callback);
    } }, { key: 'defaultExtraData', value: function defaultExtraData(

    callback) {
      return this.addListener(this._api, 'parity_defaultExtraData', callback);
    } }, { key: 'gasPriceHistogram', value: function gasPriceHistogram(

    callback) {
      return this.addListener(this._api, 'parity_gasPriceHistogram', function (error, data) {
        error ?
        callback(error) :
        callback(null, outHistogram(data));
      });
    } }, { key: 'unsignedTransactionsCount', value: function unsignedTransactionsCount(

    callback) {
      return this.addListener(this._api, 'parity_unsignedTransactionsCount', function (error, data) {
        error ?
        callback(error) :
        callback(null, outNumber(data));
      });
    } }, { key: 'registryAddress', value: function registryAddress(

    callback) {
      return this.addListener(this._api, 'parity_registryAddress', function (error, data) {
        error ?
        callback(error) :
        callback(null, outAddress(data));
      });
    } }, { key: 'listAccounts', value: function listAccounts(

    callback, count) {var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;var blockNumber = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'latest';
      return this.addListener(this._api, 'parity_listAccounts', function (error, data) {
        error ?
        callback(error) :
        callback(null, function (data) {return (data || []).map(outAddress);});
      }, [count, inAddress(offset), inBlockNumber(blockNumber)]);
    } }, { key: 'listStorageKeys', value: function listStorageKeys(

    callback, address, count) {var hash = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;var blockNumber = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'latest';
      return this.addListener(this._api, 'parity_listStorageKeys', callback, [inAddress(address), count, inHex(hash), inBlockNumber(blockNumber)]);
    } }, { key: 'pendingTransactions', value: function pendingTransactions(

    callback) {
      return this.addListener(this._api, 'parity_pendingTransactions', function (error, data) {
        error ?
        callback(error) :
        callback(null, outTransaction(data));
      });
    } }, { key: 'futureTransactions', value: function futureTransactions(

    callback) {
      return this.addListener(this._api, 'parity_futureTransactions', function (error, data) {
        error ?
        callback(error) :
        callback(null, outTransaction(data));
      });
    } }, { key: 'pendingTransactionsStats', value: function pendingTransactionsStats(

    callback) {
      return this.addListener(this._api, 'parity_pendingTransactionsStats', callback);
    } }, { key: 'localTransactions', value: function localTransactions(

    callback) {
      return this.addListener(this._api, 'parity_localTransactions', function (error, transactions) {
        if (error) {
          return callback(error);
        }

        Object.
        values(transactions).
        filter(function (tx) {return tx.transaction;}).
        forEach(function (tx) {
          tx.transaction = outTransaction(tx.transaction);
        });

        callback(null, transactions);
      });
    } }, { key: 'dappsUrl', value: function dappsUrl(

    callback) {
      return this.addListener(this._api, 'parity_dappsUrl', callback);
    } }, { key: 'wsUrl', value: function wsUrl(

    callback) {
      return this.addListener(this._api, 'parity_wsUrl', callback);
    } }, { key: 'nextNonce', value: function nextNonce(

    callback, account) {
      return this.addListener(this._api, 'parity_nextNonce', function (error, data) {
        error ?
        callback(error) :
        callback(null, outNumber(data));
      }, [inAddress(account)]);
    } }, { key: 'mode', value: function mode(

    callback) {
      return this.addListener(this._api, 'parity_mode', callback);
    } }, { key: 'chain', value: function chain(

    callback) {
      return this.addListener(this._api, 'parity_chain', callback);
    } }, { key: 'enode', value: function enode(

    callback) {
      return this.addListener(this._api, 'parity_enode', callback);
    } }, { key: 'consensusCapability', value: function consensusCapability(

    callback) {
      return this.addListener(this._api, 'parity_consensusCapability', callback);
    } }, { key: 'versionInfo', value: function versionInfo(

    callback) {
      return this.addListener(this._api, 'parity_versionInfo', callback);
    } }, { key: 'releasesInfo', value: function releasesInfo(

    callback) {
      return this.addListener(this._api, 'parity_releasesInfo', callback);
    } }, { key: 'chainStatus', value: function chainStatus(

    callback) {
      return this.addListener(this._api, 'parity_chainStatus', function (error, data) {
        error ?
        callback(error) :
        callback(null, outChainStatus(data));
      });
    } }, { key: 'nodeKind', value: function nodeKind(

    callback) {
      return this.addListener(this._api, 'parity_nodeKind', function (error, data) {
        error ?
        callback(error) :
        callback(null, outNodeKind(data));
      });
    } }, { key: 'getBlockHeaderByNumber', value: function getBlockHeaderByNumber(

    callback) {var blockNumber = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'latest';
      return this.addListener(this._api, 'parity_getBlockHeaderByNumber', function (error, data) {
        error ?
        callback(error) :
        callback(null, outBlock(data));
      }, [inBlockNumber(blockNumber)]);
    } }, { key: 'cidV0', value: function cidV0(

    callback, data) {
      return this.addListener(this._api, 'parity_cidV0', callback, [inData(data)]);
    } }, { key: 'getDappAddresses', value: function getDappAddresses(

    callback, dappId) {
      return this.addListener(this._api, 'parity_getDappAddresses', function (error, data) {
        error ?
        callback(error) :
        callback(null, outAddresses(data));
      }, [dappId]);
    } }, { key: 'getDappDefaultAddress', value: function getDappDefaultAddress(

    callback, dappId) {
      return this.addListener(this._api, 'parity_getDappDefaultAddress', function (error, data) {
        error ?
        callback(error) :
        callback(null, outAddress(data));
      }, [dappId]);
    } }, { key: 'getNewDappsAddresses', value: function getNewDappsAddresses(

    callback) {
      return this.addListener(this._api, 'parity_getDappDefaultAddress', function (error, addresses) {
        error ?
        callback(error) :
        callback(null, addresses ? addresses.map(outAddress) : null);
      });
    } }, { key: 'getNewDappsDefaultAddress', value: function getNewDappsDefaultAddress(

    callback) {
      return this.addListener(this._api, 'parity_getNewDappsDefaultAddress', function (error, data) {
        error ?
        callback(error) :
        callback(null, outAddress(data));
      });
    } }, { key: 'listRecentDapps', value: function listRecentDapps(

    callback) {
      return this.addListener(this._api, 'parity_listRecentDapps', function (error, data) {
        error ?
        callback(error) :
        callback(null, outRecentDapps(data));
      });
    } }, { key: 'listGethAccounts', value: function listGethAccounts(

    callback) {
      return this.addListener(this._api, 'parity_listGethAccounts', function (error, data) {
        error ?
        callback(error) :
        callback(null, outAddresses(data));
      });
    } }, { key: 'listVaults', value: function listVaults(

    callback) {
      return this.addListener(this._api, 'parity_listVaults', callback);
    } }, { key: 'listOpenedVaults', value: function listOpenedVaults(

    callback) {
      return this.addListener(this._api, 'parity_listOpenedVaults', callback);
    } }, { key: 'getVaultMeta', value: function getVaultMeta(

    callback, vaultName) {
      return this.addListener(this._api, 'parity_getVaultMeta', function (error, data) {
        error ?
        callback(error) :
        callback(null, outVaultMeta(data));
      }, [vaultName]);
    } }, { key: 'deriveAddressHash', value: function deriveAddressHash(

    callback, address, password, hash, shouldSave) {
      return this.addListener(this._api, 'parity_deriveAddressHash', function (error, data) {
        error ?
        callback(error) :
        callback(null, outAddress(data));
      }, [inAddress(address), password, inDeriveHash(hash), !!shouldSave]);
    } }, { key: 'deriveAddressIndex', value: function deriveAddressIndex(

    callback, address, password, index, shouldSave) {
      return this.addListener(this._api, 'parity_deriveAddressIndex', function (error, data) {
        error ?
        callback(error) :
        callback(null, outAddress(data));
      }, [inAddress(address), password, inDeriveIndex(index), !!shouldSave]);
    } }, { key: 'nodeHealth', value: function nodeHealth(

    callback) {
      return this.addListener(this._api, 'parity_nodeHealth', function (error, data) {
        error ?
        callback(error) :
        callback(null, data);
      });
    } }]);return Parity;}(PubsubBase);


module.exports = Parity;