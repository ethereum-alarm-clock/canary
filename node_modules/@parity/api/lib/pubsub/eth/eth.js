'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} // Copyright 2015-2017 Parity Technologies (UK) Ltd.
// This file is part of Parity.

// Parity is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity.  If not, see <http://www.gnu.org/licenses/>.
var PubsubBase = require('../pubsubBase');var _require =

require('../../format/input'),inAddress = _require.inAddress,inBlockNumber = _require.inBlockNumber,inHex = _require.inHex,inNumber16 = _require.inNumber16,inOptions = _require.inOptions,inFilter = _require.inFilter;var _require2 =
require('../../format/output'),outAddress = _require2.outAddress,outBlock = _require2.outBlock,outNumber = _require2.outNumber,outTransaction = _require2.outTransaction,outSyncing = _require2.outSyncing,outReceipt = _require2.outReceipt,outLog = _require2.outLog;var

Eth = function (_PubsubBase) {_inherits(Eth, _PubsubBase);
  function Eth(provider) {_classCallCheck(this, Eth);var _this = _possibleConstructorReturn(this, (Eth.__proto__ || Object.getPrototypeOf(Eth)).call(this,
    provider));
    _this._api = 'parity';return _this;
  }_createClass(Eth, [{ key: 'newHeads', value: function newHeads(

    callback) {
      return this.addListener('eth', 'newHeads', callback, null);
    } }, { key: 'logs', value: function logs(

    callback) {
      throw Error('not supported yet');
    }

    //  eth API
  }, { key: 'protocolVersion', value: function protocolVersion(callback) {
      return this.addListener(this._api, 'eth_protocolVersion', callback);
    } }, { key: 'syncing', value: function syncing(

    callback) {
      return this.addListener(this._api, 'eth_syncing', function (error, data) {
        error ?
        callback(error) :
        callback(null, outSyncing(data));
      });
    } }, { key: 'hashrate', value: function hashrate(

    callback) {
      return this.addListener(this._api, 'eth_hashrate', function (error, data) {
        error ?
        callback(error) :
        callback(null, outNumber(data));
      });
    } }, { key: 'coinbase', value: function coinbase(

    callback) {
      return this.addListener(this._api, 'eth_coinbase', function (error, data) {
        error ?
        callback(error) :
        callback(null, outAddress(data));
      });
    } }, { key: 'mining', value: function mining(

    callback) {
      return this.addListener(this._api, 'eth_mining', callback);
    } }, { key: 'gasPrice', value: function gasPrice(

    callback) {
      return this.addListener(this._api, 'eth_gasPrice', function (error, data) {
        error ?
        callback(error) :
        callback(null, outNumber(data));
      });
    } }, { key: 'accounts', value: function accounts(

    callback) {
      return this.addListener(this._api, 'eth_accounts', function (error, accounts) {
        error ?
        callback(error) :
        callback(null, (accounts || []).map(outAddress));
      });
    } }, { key: 'blockNumber', value: function blockNumber(

    callback) {
      return this.addListener(this._api, 'eth_blockNumber', function (error, data) {
        error ?
        callback(error) :
        callback(null, outNumber(data));
      });
    } }, { key: 'getBalance', value: function getBalance(

    callback, address) {var blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'latest';
      return this.addListener(this._api, 'eth_getBalance', function (error, data) {
        error ?
        callback(error) :
        callback(null, outNumber(data));
      }, [inAddress(address), inBlockNumber(blockNumber)]);
    } }, { key: 'getStorageAt', value: function getStorageAt(

    callback, address) {var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;var blockNumber = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'latest';
      return this.addListener(this._api, 'eth_getStorageAt', callback, [inAddress(address), inNumber16(index), inBlockNumber(blockNumber)]);
    } }, { key: 'getBlockByHash', value: function getBlockByHash(

    callback, hash) {var full = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      return this.addListener(this._api, 'eth_getBlockByHash', function (error, data) {
        error ?
        callback(error) :
        callback(null, outBlock(data));
      }, [inHex(hash), full]);
    } }, { key: 'getBlockByNumber', value: function getBlockByNumber(

    callback) {var blockNumber = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'latest';var full = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      return this.addListener(this._api, 'eth_getBlockByNumber', function (error, data) {
        error ?
        callback(error) :
        callback(null, outBlock(data));
      }, [inBlockNumber(blockNumber), full]);
    } }, { key: 'getTransactionCount', value: function getTransactionCount(

    callback, address) {var blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'latest';
      return this.addListener(this._api, 'eth_getTransactionCount', function (error, data) {
        error ?
        callback(error) :
        callback(null, outNumber(data));
      }, [inAddress(address), inBlockNumber(blockNumber)]);
    } }, { key: 'getBlockTransactionCountByHash', value: function getBlockTransactionCountByHash(

    callback, hash) {
      return this.addListener(this._api, 'eth_getBlockTransactionCountByHash', function (error, data) {
        error ?
        callback(error) :
        callback(null, outNumber(data));
      }, [inHex(hash)]);
    } }, { key: 'getBlockTransactionCountByNumber', value: function getBlockTransactionCountByNumber(

    callback) {var blockNumber = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'latest';
      return this.addListener(this._api, 'eth_getBlockTransactionCountByNumber', function (error, data) {
        error ?
        callback(error) :
        callback(null, outNumber(data));
      }, [inBlockNumber(blockNumber)]);
    } }, { key: 'getUncleCountByBlockHash', value: function getUncleCountByBlockHash(

    callback, hash) {
      return this.addListener(this._api, 'eth_getUncleCountByBlockHash', function (error, data) {
        error ?
        callback(error) :
        callback(null, outNumber(data));
      }, [inHex(hash)]);
    } }, { key: 'getUncleCountByBlockNumber', value: function getUncleCountByBlockNumber(

    callback) {var blockNumber = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'latest';
      return this.addListener(this._api, 'eth_getUncleCountByBlockNumber', function (error, data) {
        error ?
        callback(error) :
        callback(null, outNumber(data));
      }, [inBlockNumber(blockNumber)]);
    } }, { key: 'getCode', value: function getCode(

    callback, address) {var blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'latest';
      return this.addListener(this._api, 'eth_getCode', callback, [inAddress(address), inBlockNumber(blockNumber)]);
    } }, { key: 'call', value: function call(

    callback, options) {var blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'latest';
      return this.addListener(this._api, 'eth_call', callback, [inOptions(options), inBlockNumber(blockNumber)]);
    } }, { key: 'estimateGas', value: function estimateGas(

    callback, options) {
      return this.addListener(this._api, 'eth_estimateGas', function (error, data) {
        error ?
        callback(error) :
        callback(null, outNumber(data));
      }, [inOptions(options)]);
    } }, { key: 'getTransactionByHash', value: function getTransactionByHash(

    callback, hash) {
      return this.addListener(this._api, 'eth_getTransactionByHash', function (error, data) {
        error ?
        callback(error) :
        callback(null, outTransaction(data));
      }, [inHex(hash)]);
    } }, { key: 'getTransactionByBlockHashAndIndex', value: function getTransactionByBlockHashAndIndex(

    callback, hash) {var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      return this.addListener(this._api, 'eth_getTransactionByBlockHashAndIndex', function (error, data) {
        error ?
        callback(error) :
        callback(null, outTransaction(data));
      }, [inHex(hash), inNumber16(index)]);
    } }, { key: 'getTransactionByBlockNumberAndIndex', value: function getTransactionByBlockNumberAndIndex(

    callback) {var blockNumber = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'latest';var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      return this.addListener(this._api, 'eth_getTransactionByBlockNumberAndIndex', function (error, data) {
        error ?
        callback(error) :
        callback(null, outTransaction(data));
      }, [inBlockNumber(blockNumber), inNumber16(index)]);
    } }, { key: 'getTransactionReceipt', value: function getTransactionReceipt(

    callback, txhash) {
      return this.addListener(this._api, 'eth_getTransactionReceipt', function (error, data) {
        error ?
        callback(error) :
        callback(null, outReceipt(data));
      }, [inHex(txhash)]);
    } }, { key: 'getUncleByBlockHashAndIndex', value: function getUncleByBlockHashAndIndex(

    callback, hash) {var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      return this.addListener(this._api, 'eth_getUncleByBlockHashAndIndex', callback, [inHex(hash), inNumber16(index)]);
    } }, { key: 'getUncleByBlockNumberAndIndex', value: function getUncleByBlockNumberAndIndex(

    callback) {var blockNumber = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'latest';var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      return this.addListener(this._api, 'eth_getUncleByBlockNumberAndIndex', callback, [inBlockNumber(blockNumber), inNumber16(index)]);
    } }, { key: 'getLogs', value: function getLogs(

    callback, options) {
      return this.addListener(this._api, 'eth_getLogs', function (error, logs) {
        error ?
        callback(error) :
        callback(null, function (logs) {return logs.map(outLog);});
      }, [inFilter(options)]);
    } }, { key: 'getWork', value: function getWork(

    callback) {
      return this.addListener(this._api, 'eth_getWork', callback);
    } }]);return Eth;}(PubsubBase);


module.exports = Eth;