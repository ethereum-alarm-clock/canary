"use strict";var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}} // Copyright 2015-2017 Parity Technologies (UK) Ltd.
// This file is part of Parity.

// Parity is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity.  If not, see <http://www.gnu.org/licenses/>.
var
PubSubBase = function () {
  // Provider for websocket pubsub transport
  function PubSubBase(provider) {_classCallCheck(this, PubSubBase);
    this._provider = provider;
  }_createClass(PubSubBase, [{ key: "addListener", value: function addListener(

    module, eventName, callback) {var eventParams = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
      if (eventName) {
        var params = eventParams ?
        [eventName, eventParams] :
        [eventName];

        return this._provider.subscribe(module, callback, params);
      }

      return this._provider.subscribe(module, callback, eventParams);
    } }, { key: "removeListener", value: function removeListener(

    subscriptionIds) {
      return this._provider.unsubscribe(subscriptionIds);
    } }, { key: "unsubscribe", value: function unsubscribe(

    subscriptionIds) {
      return this.removeListener(subscriptionIds);
    } }]);return PubSubBase;}();


module.exports = PubSubBase;