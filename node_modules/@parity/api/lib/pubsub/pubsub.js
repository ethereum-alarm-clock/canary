'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}} // Copyright 2015-2017 Parity Technologies (UK) Ltd.
// This file is part of Parity.

// Parity is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity.  If not, see <http://www.gnu.org/licenses/>.

var Eth = require('./eth');
var Parity = require('./parity');
var Net = require('./net');
var Signer = require('./signer');var _require =

require('../util/types'),isFunction = _require.isFunction;var

PubSub = function () {
  function PubSub(provider) {_classCallCheck(this, PubSub);
    if (!provider || !isFunction(provider.subscribe)) {
      throw new Error('Pubsub API needs transport with subscribe() function defined. (WebSocket)');
    }

    this._eth = new Eth(provider);
    this._net = new Net(provider);
    this._parity = new Parity(provider);
    this._signer = new Signer(provider);
  }_createClass(PubSub, [{ key: 'unsubscribe', value: function unsubscribe(

















    subscriptionIds) {
      // subscriptions are namespace independent. Thus we can simply removeListener from any.
      return this._parity.removeListener(subscriptionIds);
    } }, { key: 'subscribeAndGetResult', value: function subscribeAndGetResult(

    f, callback) {var _this = this;
      return new Promise(function (resolve, reject) {
        var isFirst = true;
        var onSubscription = function onSubscription(error, data) {
          var p1 = error ? Promise.reject(error) : Promise.resolve(data);
          var p2 = p1.then(callback);

          if (isFirst) {
            isFirst = false;
            p2.
            then(resolve).
            catch(reject);
          }
        };

        try {
          f.call(_this, onSubscription).catch(reject);
        } catch (err) {
          reject(err);
        }
      });
    } }, { key: 'net', get: function get() {return this._net;} }, { key: 'eth', get: function get() {return this._eth;} }, { key: 'parity', get: function get() {return this._parity;} }, { key: 'signer', get: function get() {return this._signer;} }]);return PubSub;}();


module.exports = PubSub;