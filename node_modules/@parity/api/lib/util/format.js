'use strict'; // Copyright 2015-2017 Parity Technologies (UK) Ltd.
// This file is part of Parity.

// Parity is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity.  If not, see <http://www.gnu.org/licenses/>.
var _require =
require('lodash'),range = _require.range;

function bytesToHex(bytes) {
  return '0x' + Buffer.from(bytes).toString('hex');
}

function cleanupValue(value, type) {
  // TODO: make work with arbitrary depth arrays
  if (value instanceof Array && type.match(/bytes[0-9]+/)) {
    // figure out if it's an ASCII string hiding in there:
    var ascii = '';

    for (var index = 0, ended = false; index < value.length && ascii !== null; ++index) {
      var val = value[index];

      if (val === 0) {
        ended = true;
      } else {
        ascii += String.fromCharCode(val);
      }

      if (ended && val !== 0 || !ended && (val < 32 || val >= 128)) {
        ascii = null;
      }
    }

    value = ascii === null ?
    bytesToHex(value) :
    ascii;
  }

  if (type.substr(0, 4) === 'uint' && +type.substr(4) <= 48) {
    value = +value;
  }

  return value;
}

function hexToBytes(hex) {
  var raw = toHex(hex).slice(2);
  var bytes = [];

  for (var i = 0; i < raw.length; i += 2) {
    bytes.push(parseInt(raw.substr(i, 2), 16));
  }

  return bytes;
}

function hexToAscii(hex) {
  var bytes = hexToBytes(hex);
  var str = bytes.map(function (byte) {return String.fromCharCode(byte);}).join('');

  return str;
}

function bytesToAscii(bytes) {
  return bytes.map(function (b) {return String.fromCharCode(b % 512);}).join('');
}

function asciiToHex(string) {
  var result = '0x';

  for (var i = 0; i < string.length; ++i) {
    result += ('0' + string.charCodeAt(i).toString(16)).substr(-2);
  }

  return result;
}

function padRight(input, length) {
  var hexLength = length * 2;
  var value = toHex(input).substr(2, hexLength);

  return '0x' + value + range(hexLength - value.length).map(function () {return '0';}).join('');
}

function padLeft(input, length) {
  var hexLength = length * 2;
  var value = toHex(input).substr(2, hexLength);

  return '0x' + range(hexLength - value.length).map(function () {return '0';}).join('') + value;
}

function toHex(str) {
  if (str && str.toString) {
    str = str.toString(16);
  }

  if (str && str.substr(0, 2) === '0x') {
    return str.toLowerCase();
  }

  return '0x' + (str || '').toLowerCase();
}

module.exports = {
  asciiToHex: asciiToHex,
  bytesToAscii: bytesToAscii,
  bytesToHex: bytesToHex,
  cleanupValue: cleanupValue,
  hexToAscii: hexToAscii,
  hexToBytes: hexToBytes,
  padLeft: padLeft,
  padRight: padRight,
  toHex: toHex };