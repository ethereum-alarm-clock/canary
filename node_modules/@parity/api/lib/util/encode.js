'use strict'; // Copyright 2015-2017 Parity Technologies (UK) Ltd.
// This file is part of Parity.

// Parity is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity.  If not, see <http://www.gnu.org/licenses/>.

var Abi = require('@parity/abi');
var Func = require('@parity/abi/lib/spec/function');var _require =

require('./decode'),abiDecode = _require.abiDecode;var _require2 =
require('./format'),cleanupValue = _require2.cleanupValue;var _require3 =
require('./sha3'),sha3 = _require3.sha3;

function encodeMethodCallAbi() {var methodAbi = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var func = new Func(methodAbi);
  var tokens = Abi.encodeTokens(func.inputParamTypes(), values);
  var call = func.encodeCall(tokens);

  return '0x' + call;
}

function abiEncode(methodName, inputTypes, data) {
  var result = encodeMethodCallAbi({
    name: methodName || '',
    type: 'function',
    inputs: inputTypes.map(function (type) {
      return { type: type };
    }) },
  data);

  return result;
}

function abiUnencode(abi, data) {
  var callsig = data.substr(2, 8);
  var op = abi.find(function (field) {
    return field.type === 'function' &&
    abiSignature(field.name, field.inputs.map(function (input) {return input.type;})).substr(2, 8) === callsig;
  });

  if (!op) {
    console.warn('Unknown function ID: ' + callsig);
    return null;
  }

  var argsByIndex = abiDecode(op.inputs.map(function (field) {return field.type;}), '0x' + data.substr(10)).
  map(function (value, index) {return cleanupValue(value, op.inputs[index].type);});
  var argsByName = op.inputs.reduce(function (result, field, index) {
    result[field.name] = argsByIndex[index];

    return result;
  }, {});

  return [op.name, argsByName, argsByIndex];
}

function abiSignature(name, inputs) {
  return sha3(name + '(' + inputs.join() + ')');
}

module.exports = {
  abiEncode: abiEncode,
  abiSignature: abiSignature,
  abiUnencode: abiUnencode,
  encodeMethodCallAbi: encodeMethodCallAbi };