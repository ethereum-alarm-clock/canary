'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}} // Copyright 2015-2017 Parity Technologies (UK) Ltd.
// This file is part of Parity.

// Parity is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity.  If not, see <http://www.gnu.org/licenses/>.
var _require =
require('../../format/input'),inData = _require.inData,inNumber16 = _require.inNumber16,inOptions = _require.inOptions;var _require2 =
require('../../format/output'),outSignerRequest = _require2.outSignerRequest;var

Signer = function () {
  function Signer(provider) {_classCallCheck(this, Signer);
    this._provider = provider;
  }_createClass(Signer, [{ key: 'confirmRequest', value: function confirmRequest(

    requestId, options, password) {
      return this._provider.
      send('signer_confirmRequest', inNumber16(requestId), inOptions(options), password);
    } }, { key: 'confirmRequestRaw', value: function confirmRequestRaw(

    requestId, data) {
      return this._provider.
      send('signer_confirmRequestRaw', inNumber16(requestId), inData(data));
    } }, { key: 'confirmRequestWithToken', value: function confirmRequestWithToken(

    requestId, options, password) {
      return this._provider.
      send('signer_confirmRequestWithToken', inNumber16(requestId), inOptions(options), password);
    } }, { key: 'generateAuthorizationToken', value: function generateAuthorizationToken()

    {
      return this._provider.
      send('signer_generateAuthorizationToken');
    } }, { key: 'generateWebProxyAccessToken', value: function generateWebProxyAccessToken(

    domain) {
      return this._provider.
      execute('signer_generateWebProxyAccessToken', domain);
    } }, { key: 'rejectRequest', value: function rejectRequest(

    requestId) {
      return this._provider.
      send('signer_rejectRequest', inNumber16(requestId));
    } }, { key: 'requestsToConfirm', value: function requestsToConfirm()

    {
      return this._provider.
      send('signer_requestsToConfirm').
      then(function (requests) {return (requests || []).map(outSignerRequest);});
    } }, { key: 'signerEnabled', value: function signerEnabled()

    {
      return this._provider.
      send('signer_signerEnabled');
    } }]);return Signer;}();


module.exports = Signer;