'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}} // Copyright 2015-2017 Parity Technologies (UK) Ltd.
// This file is part of Parity.

// Parity is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity.  If not, see <http://www.gnu.org/licenses/>.
var _require =
require('../../format/input'),inBlockNumber = _require.inBlockNumber,inData = _require.inData,inHex = _require.inHex,inNumber16 = _require.inNumber16,inOptions = _require.inOptions,inTraceFilter = _require.inTraceFilter,inTraceType = _require.inTraceType;var _require2 =
require('../../format/output'),outTraces = _require2.outTraces,outTraceReplay = _require2.outTraceReplay;var

Trace = function () {
  function Trace(provider) {_classCallCheck(this, Trace);
    this._provider = provider;
  }_createClass(Trace, [{ key: 'block', value: function block()

    {var blockNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'latest';
      return this._provider.
      send('trace_block', inBlockNumber(blockNumber)).
      then(outTraces);
    } }, { key: 'call', value: function call(

    options) {var whatTrace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['trace'];var blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'latest';
      return this._provider.
      send('trace_call', inOptions(options), inTraceType(whatTrace), inBlockNumber(blockNumber)).
      then(outTraceReplay);
    } }, { key: 'filter', value: function filter(

    filterObj) {
      return this._provider.
      send('trace_filter', inTraceFilter(filterObj)).
      then(outTraces);
    } }, { key: 'get', value: function get(

    txHash, position) {
      return this._provider.
      send('trace_get', inHex(txHash), inNumber16(position)).
      then(outTraces);
    } }, { key: 'rawTransaction', value: function rawTransaction(

    data) {var whatTrace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['trace'];
      return this._provider.
      send('trace_rawTransaction', inData(data), inTraceType(whatTrace)).
      then(outTraceReplay);
    } }, { key: 'replayTransaction', value: function replayTransaction(

    txHash) {var whatTrace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['trace'];
      return this._provider.
      send('trace_replayTransaction', txHash, inTraceType(whatTrace)).
      then(outTraceReplay);
    } }, { key: 'transaction', value: function transaction(

    txHash) {
      return this._provider.
      send('trace_transaction', inHex(txHash)).
      then(outTraces);
    } }]);return Trace;}();


module.exports = Trace;