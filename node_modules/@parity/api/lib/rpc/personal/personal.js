'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}} // Copyright 2015-2017 Parity Technologies (UK) Ltd.
// This file is part of Parity.

// Parity is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity.  If not, see <http://www.gnu.org/licenses/>.
var _require =
require('../../format/input'),inAddress = _require.inAddress,inNumber16 = _require.inNumber16,inOptions = _require.inOptions;var _require2 =
require('../../format/output'),outAddress = _require2.outAddress;var

Personal = function () {
  function Personal(provider) {_classCallCheck(this, Personal);
    this._provider = provider;
  }_createClass(Personal, [{ key: 'listAccounts', value: function listAccounts()

    {
      return this._provider.
      send('personal_listAccounts').
      then(function (accounts) {return (accounts || []).map(outAddress);});
    } }, { key: 'newAccount', value: function newAccount(

    password) {
      return this._provider.
      send('personal_newAccount', password).
      then(outAddress);
    } }, { key: 'sendTransaction', value: function sendTransaction(

    options, password) {
      return this._provider.
      send('personal_sendTransaction', inOptions(options), password);
    } }, { key: 'unlockAccount', value: function unlockAccount(

    account, password) {var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      return this._provider.
      send('personal_unlockAccount', inAddress(account), password, inNumber16(duration));
    } }]);return Personal;}();


module.exports = Personal;