'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}} // Copyright 2015-2017 Parity Technologies (UK) Ltd.
// This file is part of Parity.

// Parity is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity.  If not, see <http://www.gnu.org/licenses/>.
var _require =
require('../../format/input'),inHex = _require.inHex;var

Db = function () {
  function Db(transport) {_classCallCheck(this, Db);
    this._transport = transport;
  }_createClass(Db, [{ key: 'getHex', value: function getHex(

    dbName, keyName) {
      return this._transport.
      send('db_getHex', dbName, keyName);
    } }, { key: 'getString', value: function getString(

    dbName, keyName) {
      return this._transport.
      send('db_getString', dbName, keyName);
    } }, { key: 'putHex', value: function putHex(

    dbName, keyName, hexData) {
      return this._transport.
      send('db_putHex', dbName, keyName, inHex(hexData));
    } }, { key: 'putString', value: function putString(

    dbName, keyName, stringData) {
      return this._transport.
      send('db_putString', dbName, keyName, stringData);
    } }]);return Db;}();


module.exports = Db;