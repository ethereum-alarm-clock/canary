'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}} // Copyright 2015-2017 Parity Technologies (UK) Ltd.
// This file is part of Parity.

// Parity is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity.  If not, see <http://www.gnu.org/licenses/>.
var
Shell = function () {
  function Shell(provider) {_classCallCheck(this, Shell);
    this._provider = provider;
  }_createClass(Shell, [{ key: 'getApps', value: function getApps()

    {var retrieveAll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      return this._provider.
      send('shell_getApps', retrieveAll);
    } }, { key: 'getFilteredMethods', value: function getFilteredMethods()

    {
      return this._provider.
      send('shell_getFilteredMethods');
    } }, { key: 'getMethodGroups', value: function getMethodGroups()

    {
      return this._provider.
      send('shell_getMethodGroups');
    } }, { key: 'getMethodPermissions', value: function getMethodPermissions()

    {
      return this._provider.
      send('shell_getMethodPermissions');
    } }, { key: 'loadApp', value: function loadApp(

    appId) {var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      return this._provider.
      send('shell_loadApp', appId, params);
    } }, { key: 'setMethodPermissions', value: function setMethodPermissions(

    permissions) {
      return this._provider.
      send('shell_setMethodPermissions', permissions);
    } }, { key: 'setAppVisibility', value: function setAppVisibility(

    appId, state) {
      return this._provider.
      send('shell_setAppVisibility', appId, state);
    } }, { key: 'setAppPinned', value: function setAppPinned(

    appId, state) {
      return this._provider.
      send('shell_setAppPinned', appId, state);
    } }]);return Shell;}();


module.exports = Shell;