'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}} // Copyright 2015-2017 Parity Technologies (UK) Ltd.
// This file is part of Parity.

// Parity is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity.  If not, see <http://www.gnu.org/licenses/>.
var
Shh = function () {
  function Shh(transport) {_classCallCheck(this, Shh);
    this._transport = transport;
  }_createClass(Shh, [{ key: 'info', value: function info()

    {
      return this._transport.
      execute('shh_info');
    } }, { key: 'newKeyPair', value: function newKeyPair()

    {
      return this._transport.
      execute('shh_newKeyPair');
    } }, { key: 'addPrivateKey', value: function addPrivateKey(

    privKey) {
      return this._transport.
      execute('shh_addPrivateKey', privKey);
    } }, { key: 'newSymKey', value: function newSymKey()

    {
      return this._transport.
      execute('shh_newSymKey');
    } }, { key: 'getPublicKey', value: function getPublicKey(

    identity) {
      return this._transport.
      execute('shh_getPublicKey', identity);
    } }, { key: 'getPrivateKey', value: function getPrivateKey(

    identity) {
      return this._transport.
      execute('shh_getPrivateKey', identity);
    } }, { key: 'getSymKey', value: function getSymKey(

    identity) {
      return this._transport.
      execute('shh_getSymKey', identity);
    } }, { key: 'deleteKey', value: function deleteKey(

    identity) {
      return this._transport.
      execute('shh_deleteKey', identity);
    } }, { key: 'post', value: function post(

    messageObj) {
      return this._transport.
      execute('shh_post', messageObj);
    } }, { key: 'newMessageFilter', value: function newMessageFilter(

    filterObj) {
      return this._transport.
      execute('shh_newMessageFilter', filterObj);
    } }, { key: 'getFilterMessages', value: function getFilterMessages(

    filterId) {
      return this._transport.
      execute('shh_getFilterMessages', filterId);
    } }, { key: 'deleteMessageFilter', value: function deleteMessageFilter(

    filterId) {
      return this._transport.
      execute('shh_deleteMessageFilter', filterId);
    } }, { key: 'subscribe', value: function subscribe(

    filterObj, callback) {
      return this._transport.
      subscribe('shh', callback, filterObj);
    } }, { key: 'unsubscribe', value: function unsubscribe(

    subscriptionId) {
      return this._transport.
      unsubscribe(subscriptionId);
    } }]);return Shh;}();


module.exports = Shh;