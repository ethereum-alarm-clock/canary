'use strict';var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}(); // Copyright 2015-2017 Parity Technologies (UK) Ltd.
// This file is part of Parity.

// Parity is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity.  If not, see <http://www.gnu.org/licenses/>.

/* eslint-disable no-unused-expressions */var _require =

require('../../test/e2e/ethapi'),createHttpApi = _require.createHttpApi;var _require2 =
require('../../test/types'),isHexNumber = _require2.isHexNumber;

describe('ethapi.web3', function () {
  var ethapi = createHttpApi();

  describe('clientVersion', function () {
    it('returns the client version', function () {
      return ethapi.web3.clientVersion().then(function (version) {var _version$split =
        version.split('/'),_version$split2 = _slicedToArray(_version$split, 1),client = _version$split2[0];

        expect(client === 'Parity' || client === 'Geth').to.be.ok;
      });
    });
  });

  describe('sha3', function () {
    it('returns a keccak256 sha', function () {
      var sha = '0xa7916fac4f538170f7cd12c148552e2cba9fcd72329a2dd5b07a6fa906488ddf';
      var hexStr = 'baz()'.split('').map(function (char) {return char.charCodeAt(0).toString(16);}).join('');

      return ethapi.web3.sha3('0x' + hexStr).then(function (hash) {
        expect(isHexNumber(hash)).to.be.true;
        expect(hash).to.equal(sha);
      });
    });
  });
});