'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} // Copyright 2015-2017 Parity Technologies (UK) Ltd.
// This file is part of Parity.

// Parity is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity.  If not, see <http://www.gnu.org/licenses/>.

var JsonRpcEncoder = require('../transport/jsonRpcEncoder');var

Current = function (_JsonRpcEncoder) {_inherits(Current, _JsonRpcEncoder);
  function Current(currentProvider) {_classCallCheck(this, Current);var _this = _possibleConstructorReturn(this, (Current.__proto__ || Object.getPrototypeOf(Current)).call(this));


    _this._currentProvider = currentProvider;return _this;
  }_createClass(Current, [{ key: 'send', value: function send(

    method, params, callback) {
      this._currentProvider.sendAsync(this.encodeObject(method, params), function (error, result) {
        if (error) {
          callback(error);
        } else if (result && result.result) {
          callback(null, result.result);
        } else {
          callback(null, result);
        }
      });
    } }, { key: 'isParity', get: function get()

    {
      return !!this._currentProvider.isParity;
    } }]);return Current;}(JsonRpcEncoder);


module.exports = Current;